services:
  # Nginx Proxy - Valet benzeri .test domain yönlendirici
  nginx-proxy:
    image: nginx:alpine
    container_name: laravel-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - laravel-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Laravel Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: laravel-app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/local.ini
    # ports artık nginx-proxy üzerinden yönlendirilecek
    expose:
      - "80"
    networks:
      - laravel-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: laravel-mysql
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: pass
      MYSQL_USER: laravel
      MYSQL_PASSWORD: pass
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - laravel-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppass"]
      timeout: 5s
      interval: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: laravel-redis
    restart: unless-stopped
    tty: true
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - laravel-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      interval: 5s
      retries: 5


  # PhpMyAdmin (Opsiyonel - Database yönetimi için)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: laravel-phpmyadmin
    restart: unless-stopped
    tty: true
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
      PMA_USER: root
      PMA_PASSWORD: pass
      MYSQL_ROOT_PASSWORD: pass
      HIDE_DB: information_schema,performance_schema,mysql,sys
      PMA_QUERYHISTORYDB: false
      PMA_PHPMYADMIN_ALLOW_ARBITRARY_SERVER: false
    volumes:
      - ./docker/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.inc.php
      - ./docker/phpmyadmin/themes/blueberry:/var/www/html/themes/blueberry
      - ./docker/phpmyadmin/php.ini:/usr/local/etc/php/conf.d/99-phpmyadmin.ini
    ports:
      - "8080:80"
    depends_on:
      - mysql
    networks:
      - laravel-network

  # Redis Commander (Opsiyonel - Redis yönetimi için)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: laravel-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: redis:redis:6379:0
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - laravel-network

  # Elasticsearch (Opsiyonel - Arama için)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: laravel-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - laravel-network

  # Laravel Queue Worker
  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: laravel-queue
    restart: unless-stopped
    command: php artisan queue:work --verbose --tries=3 --timeout=90
    volumes:
      - ./:/var/www
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_started
    networks:
      - laravel-network

  # Laravel Cron Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: laravel-scheduler
    restart: unless-stopped
    command: sh -c "while true; do php artisan schedule:run; sleep 60; done"
    volumes:
      - ./:/var/www
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_started
    networks:
      - laravel-network

# Docker Networks
networks:
  laravel-network:
    driver: bridge

# Docker Volumes  
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local