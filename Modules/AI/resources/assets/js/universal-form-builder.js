/**
 * Universal Form Builder - AI Feature Dynamic Form System
 * 
 * Bu sistem AI feature'ları için dinamik form yapıları oluşturur
 * Database'den form config'i alarak real-time form render eder
 * 
 * @version 1.0.0
 * @author Claude Code
 */

class UniversalFormBuilder {
    
    constructor(featureId, container, options = {}) {
        this.featureId = featureId;
        this.container = container;
        this.formData = null;
        this.userInputs = {};
        this.validationRules = {};
        this.currentMode = options.mode || 'accordion'; // accordion | modal | inline
        this.onFormSubmit = options.onFormSubmit || null;
        this.onInputChange = options.onInputChange || null;
        this.enableAutoSave = options.enableAutoSave || false;
        this.autoSaveDelay = options.autoSaveDelay || 2000;
        this.loadingTemplate = options.loadingTemplate || this.getDefaultLoadingTemplate();
        
        // State management
        this.isLoading = false;
        this.isSubmitting = false;
        this.autoSaveTimeout = null;
        this.validationErrors = {};
        
        // Initialize
        this.init();
    }
    
    /**
     * Initialize form builder
     */
    async init() {
        try {
            this.showLoading();
            await this.loadFormStructure();
            this.renderForm();
            this.attachEventListeners();
            this.loadSmartDefaults();
            this.hideLoading();
            
            // Auto-save setup
            if (this.enableAutoSave) {
                this.setupAutoSave();
            }
            
            // Trigger ready event
            this.triggerEvent('formReady', { 
                featureId: this.featureId, 
                formData: this.formData 
            });
            
        } catch (error) {
            console.error('UniversalFormBuilder initialization failed:', error);
            this.showError('Form yüklenirken hata oluştu: ' + error.message);
        }
    }
    
    /**
     * Load form structure from API
     */
    async loadFormStructure() {
        const response = await fetch(`/admin/ai/api/features/${this.featureId}/form-structure`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        this.formData = await response.json();
        this.validationRules = this.formData.validation_rules || {};
        
        console.log('Form structure loaded:', this.formData);
    }
    
    /**
     * Load smart defaults for inputs
     */
    async loadSmartDefaults() {
        try {
            const response = await fetch(`/admin/ai/api/features/${this.featureId}/get-defaults`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')
                }
            });
            
            if (response.ok) {
                const defaults = await response.json();
                this.applyDefaults(defaults);
            }
        } catch (error) {
            console.warn('Smart defaults could not be loaded:', error);
        }
    }
    
    /**
     * Apply default values to form
     */
    applyDefaults(defaults) {
        Object.keys(defaults).forEach(inputKey => {
            const input = document.querySelector(`[name=\"${inputKey}\"]`);
            if (input && !input.value) {
                input.value = defaults[inputKey];
                this.userInputs[inputKey] = defaults[inputKey];
                
                // Trigger change event for dependent inputs
                input.dispatchEvent(new Event('change', { bubbles: true }));
            }
        });
        
        this.triggerEvent('defaultsApplied', { defaults });
    }
    
    /**
     * Render complete form
     */
    renderForm() {
        if (!this.formData) {
            console.error('No form data available');
            return;
        }
        
        let formHTML = '<form id=\"ai-universal-form\" class=\"universal-ai-form\">';
        
        // Primary input (always visible)
        if (this.formData.primary_input) {
            formHTML += '<div class=\"primary-input-section mb-4\">';
            formHTML += this.renderInput(this.formData.primary_input, true);
            formHTML += '</div>';
        }
        
        // Secondary inputs (grouped)
        if (this.formData.groups && Object.keys(this.formData.groups).length > 0) {
            if (this.currentMode === 'accordion') {
                formHTML += this.renderAccordion(this.formData.groups);
            } else {
                formHTML += this.renderInlineGroups(this.formData.groups);
            }
        }
        
        // Submit section
        formHTML += this.renderSubmitSection();
        formHTML += '</form>';
        
        this.container.innerHTML = formHTML;
        
        // Initialize form plugins
        this.initializePlugins();
    }
    
    /**
     * Render single input
     */
    renderInput(input, isPrimary = false) {
        const inputId = `input_${input.input_key}`;
        const labelClass = isPrimary ? 'form-label fw-bold fs-5' : 'form-label';
        const containerClass = isPrimary ? 'primary-input-container' : 'secondary-input-container';
        
        let html = `<div class=\"${containerClass} mb-3\" data-input-key=\"${input.input_key}\"`;
        
        // Conditional display
        if (input.depends_on && input.depends_on.length > 0) {
            html += ` data-depends-on='${JSON.stringify(input.depends_on)}' style=\"display: none;\"`;
        }
        
        html += '>';
        
        // Label
        html += `<label for=\"${inputId}\" class=\"${labelClass}\">`;\n        html += input.label;\n        if (input.is_required) {\n            html += ' <span class=\"text-danger\">*</span>';\n        }\n        html += '</label>';\n        \n        // Help text\n        if (input.help_text) {\n            html += `<div class=\"form-text mb-2\">${input.help_text}</div>`;\n        }\n        \n        // Input field\n        switch (input.input_type) {\n            case 'textarea':\n                html += this.renderTextarea(input, inputId);\n                break;\n            case 'text':\n                html += this.renderTextInput(input, inputId);\n                break;\n            case 'select':\n                html += this.renderSelect(input, inputId);\n                break;\n            case 'radio':\n                html += this.renderRadio(input, inputId);\n                break;\n            case 'checkbox':\n                html += this.renderCheckbox(input, inputId);\n                break;\n            case 'range':\n                html += this.renderRange(input, inputId);\n                break;\n            case 'number':\n                html += this.renderNumber(input, inputId);\n                break;\n            default:\n                html += this.renderTextInput(input, inputId);\n        }\n        \n        // Validation feedback container\n        html += `<div class=\"invalid-feedback\" id=\"${inputId}_feedback\"></div>`;\n        \n        html += '</div>';\n        \n        return html;\n    }\n    \n    /**\n     * Render textarea input\n     */\n    renderTextarea(input, inputId) {\n        const rows = input.rows || (input.input_key === 'topic' ? 4 : 3);\n        \n        return `<textarea \n            class=\"form-control\" \n            id=\"${inputId}\" \n            name=\"${input.input_key}\" \n            rows=\"${rows}\"\n            placeholder=\"${input.placeholder || ''}\"\n            ${input.is_required ? 'required' : ''}\n            data-input-type=\"${input.input_type}\"\n        >${input.default_value || ''}</textarea>`;\n    }\n    \n    /**\n     * Render text input\n     */\n    renderTextInput(input, inputId) {\n        return `<input \n            type=\"text\" \n            class=\"form-control\" \n            id=\"${inputId}\" \n            name=\"${input.input_key}\" \n            placeholder=\"${input.placeholder || ''}\"\n            value=\"${input.default_value || ''}\"\n            ${input.is_required ? 'required' : ''}\n            data-input-type=\"${input.input_type}\"\n        />`;\n    }\n    \n    /**\n     * Render select dropdown\n     */\n    renderSelect(input, inputId) {\n        let html = `<select class=\"form-select\" id=\"${inputId}\" name=\"${input.input_key}\" ${input.is_required ? 'required' : ''} data-input-type=\"${input.input_type}\">`;\n        \n        if (!input.is_required) {\n            html += '<option value=\"\">Seçiniz...</option>';\n        }\n        \n        if (input.options && input.options.length > 0) {\n            input.options.forEach(option => {\n                const selected = input.default_value === option.option_value ? 'selected' : '';\n                html += `<option value=\"${option.option_value}\" ${selected} data-prompt-id=\"${option.prompt_id || ''}\">`;\n                html += option.option_label;\n                html += '</option>';\n            });\n        }\n        \n        html += '</select>';\n        return html;\n    }\n    \n    /**\n     * Render radio buttons\n     */\n    renderRadio(input, inputId) {\n        let html = '<div class=\"radio-group\">';\n        \n        if (input.options && input.options.length > 0) {\n            input.options.forEach((option, index) => {\n                const radioId = `${inputId}_${index}`;\n                const checked = input.default_value === option.option_value ? 'checked' : '';\n                \n                html += '<div class=\"form-check\">';\n                html += `<input class=\"form-check-input\" type=\"radio\" name=\"${input.input_key}\" id=\"${radioId}\" value=\"${option.option_value}\" ${checked} data-prompt-id=\"${option.prompt_id || ''}\" data-input-type=\"${input.input_type}\" ${input.is_required ? 'required' : ''}>`;\n                html += `<label class=\"form-check-label\" for=\"${radioId}\">${option.option_label}</label>`;\n                html += '</div>';\n            });\n        }\n        \n        html += '</div>';\n        return html;\n    }\n    \n    /**\n     * Render checkboxes\n     */\n    renderCheckbox(input, inputId) {\n        let html = '<div class=\"checkbox-group\">';\n        \n        if (input.options && input.options.length > 0) {\n            input.options.forEach((option, index) => {\n                const checkboxId = `${inputId}_${index}`;\n                let checked = '';\n                \n                // Handle default values (can be array for multiple selections)\n                if (input.default_value) {\n                    const defaults = Array.isArray(input.default_value) \n                        ? input.default_value \n                        : [input.default_value];\n                    checked = defaults.includes(option.option_value) ? 'checked' : '';\n                }\n                \n                html += '<div class=\"form-check\">';\n                html += `<input class=\"form-check-input\" type=\"checkbox\" name=\"${input.input_key}[]\" id=\"${checkboxId}\" value=\"${option.option_value}\" ${checked} data-prompt-id=\"${option.prompt_id || ''}\" data-input-type=\"${input.input_type}\">`;\n                html += `<label class=\"form-check-label\" for=\"${checkboxId}\">${option.option_label}</label>`;\n                html += '</div>';\n            });\n        }\n        \n        html += '</div>';\n        return html;\n    }\n    \n    /**\n     * Render range slider\n     */\n    renderRange(input, inputId) {\n        const min = input.validation_rules?.min || 0;\n        const max = input.validation_rules?.max || 100;\n        const step = input.validation_rules?.step || 1;\n        const value = input.default_value || min;\n        \n        let html = '<div class=\"range-input-group\">';\n        html += `<input type=\"range\" class=\"form-range\" id=\"${inputId}\" name=\"${input.input_key}\" min=\"${min}\" max=\"${max}\" step=\"${step}\" value=\"${value}\" data-input-type=\"${input.input_type}\">`;\n        html += `<div class=\"range-value-display\"><span id=\"${inputId}_display\">${value}</span></div>`;\n        html += '</div>';\n        \n        return html;\n    }\n    \n    /**\n     * Render number input\n     */\n    renderNumber(input, inputId) {\n        const min = input.validation_rules?.min || '';\n        const max = input.validation_rules?.max || '';\n        const step = input.validation_rules?.step || 1;\n        \n        return `<input \n            type=\"number\" \n            class=\"form-control\" \n            id=\"${inputId}\" \n            name=\"${input.input_key}\" \n            placeholder=\"${input.placeholder || ''}\"\n            value=\"${input.default_value || ''}\"\n            min=\"${min}\"\n            max=\"${max}\"\n            step=\"${step}\"\n            ${input.is_required ? 'required' : ''}\n            data-input-type=\"${input.input_type}\"\n        />`;\n    }\n    \n    /**\n     * Render accordion for grouped inputs\n     */\n    renderAccordion(groups) {\n        let html = '<div class=\"accordion accordion-flush\" id=\"advancedSettingsAccordion\">';\n        \n        Object.keys(groups).forEach((groupKey, index) => {\n            const group = groups[groupKey];\n            const isFirst = index === 0;\n            \n            html += '<div class=\"accordion-item\">';\n            html += `<h2 class=\"accordion-header\" id=\"heading_${groupKey}\">`;\n            html += `<button class=\"accordion-button ${isFirst ? '' : 'collapsed'}\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapse_${groupKey}\" aria-expanded=\"${isFirst}\" aria-controls=\"collapse_${groupKey}\">`;\n            html += group.name || this.formatGroupName(groupKey);\n            html += '</button></h2>';\n            \n            html += `<div id=\"collapse_${groupKey}\" class=\"accordion-collapse collapse ${isFirst ? 'show' : ''}\" aria-labelledby=\"heading_${groupKey}\" data-bs-parent=\"#advancedSettingsAccordion\">`;\n            html += '<div class=\"accordion-body\">';\n            \n            // Render group inputs\n            if (group.inputs && group.inputs.length > 0) {\n                group.inputs.forEach(input => {\n                    html += this.renderInput(input);\n                });\n            }\n            \n            html += '</div></div></div>';\n        });\n        \n        html += '</div>';\n        return html;\n    }\n    \n    /**\n     * Render inline groups (no accordion)\n     */\n    renderInlineGroups(groups) {\n        let html = '<div class=\"inline-groups\">';\n        \n        Object.keys(groups).forEach(groupKey => {\n            const group = groups[groupKey];\n            \n            html += `<div class=\"input-group-section\" data-group=\"${groupKey}\">`;\n            html += `<h5 class=\"group-title\">${group.name || this.formatGroupName(groupKey)}</h5>`;\n            \n            if (group.inputs && group.inputs.length > 0) {\n                group.inputs.forEach(input => {\n                    html += this.renderInput(input);\n                });\n            }\n            \n            html += '</div>';\n        });\n        \n        html += '</div>';\n        return html;\n    }\n    \n    /**\n     * Render submit section\n     */\n    renderSubmitSection() {\n        return `\n            <div class=\"submit-section mt-4 pt-3 border-top\">\n                <div class=\"d-flex justify-content-between align-items-center\">\n                    <div class=\"form-info text-muted small\">\n                        <i class=\"ti ti-info-circle me-1\"></i>\n                        Formu doldurduktan sonra AI ile işleme başlayabilirsiniz.\n                    </div>\n                    <div class=\"submit-buttons\">\n                        <button type=\"button\" class=\"btn btn-outline-secondary\" id=\"clearFormBtn\">\n                            <i class=\"ti ti-refresh\"></i>\n                            Temizle\n                        </button>\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"submitFormBtn\">\n                            <i class=\"ti ti-sparkles\"></i>\n                            <span class=\"submit-text\">AI ile İşle</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * Attach event listeners\n     */\n    attachEventListeners() {\n        const form = document.getElementById('ai-universal-form');\n        if (!form) return;\n        \n        // Form submission\n        form.addEventListener('submit', this.handleFormSubmit.bind(this));\n        \n        // Input changes\n        form.addEventListener('change', this.handleInputChange.bind(this));\n        form.addEventListener('input', this.handleInputChange.bind(this));\n        \n        // Clear form button\n        const clearBtn = document.getElementById('clearFormBtn');\n        if (clearBtn) {\n            clearBtn.addEventListener('click', this.clearForm.bind(this));\n        }\n        \n        // Range slider display updates\n        const rangeInputs = form.querySelectorAll('input[type=\"range\"]');\n        rangeInputs.forEach(range => {\n            range.addEventListener('input', (e) => {\n                const display = document.getElementById(e.target.id + '_display');\n                if (display) {\n                    display.textContent = e.target.value;\n                }\n            });\n        });\n        \n        // Conditional field display\n        this.setupConditionalFields();\n    }\n    \n    /**\n     * Handle form submission\n     */\n    async handleFormSubmit(event) {\n        event.preventDefault();\n        \n        if (this.isSubmitting) return;\n        \n        try {\n            this.isSubmitting = true;\n            this.setSubmitButtonState(true);\n            \n            // Collect and validate form data\n            const formData = this.collectFormData();\n            const validation = await this.validateForm(formData);\n            \n            if (!validation.valid) {\n                this.displayValidationErrors(validation.errors);\n                return;\n            }\n            \n            // Clear any previous errors\n            this.clearValidationErrors();\n            \n            // Process form\n            if (this.onFormSubmit) {\n                await this.onFormSubmit(formData, this.formData.feature);\n            } else {\n                await this.processForm(formData);\n            }\n            \n            this.triggerEvent('formSubmitted', { formData, feature: this.formData.feature });\n            \n        } catch (error) {\n            console.error('Form submission error:', error);\n            this.showError('Form gönderilirken hata oluştu: ' + error.message);\n        } finally {\n            this.isSubmitting = false;\n            this.setSubmitButtonState(false);\n        }\n    }\n    \n    /**\n     * Handle input changes\n     */\n    handleInputChange(event) {\n        const input = event.target;\n        const inputKey = input.name.replace('[]', ''); // Handle array inputs\n        const value = this.getInputValue(input);\n        \n        // Update user inputs\n        this.userInputs[inputKey] = value;\n        \n        // Clear validation error for this field\n        this.clearFieldValidationError(input);\n        \n        // Update conditional fields\n        this.updateConditionalFields(inputKey, value);\n        \n        // Trigger callback\n        if (this.onInputChange) {\n            this.onInputChange(inputKey, value, input);\n        }\n        \n        // Auto-save\n        if (this.enableAutoSave) {\n            this.scheduleAutoSave();\n        }\n        \n        this.triggerEvent('inputChanged', { inputKey, value, input });\n    }\n    \n    /**\n     * Get input value based on input type\n     */\n    getInputValue(input) {\n        switch (input.type) {\n            case 'checkbox':\n                if (input.name.includes('[]')) {\n                    // Multiple checkboxes\n                    const name = input.name.replace('[]', '');\n                    const checkboxes = document.querySelectorAll(`input[name=\"${input.name}\"]:checked`);\n                    return Array.from(checkboxes).map(cb => cb.value);\n                } else {\n                    // Single checkbox\n                    return input.checked;\n                }\n            case 'radio':\n                return input.value;\n            case 'range':\n            case 'number':\n                return parseFloat(input.value) || 0;\n            default:\n                return input.value;\n        }\n    }\n    \n    /**\n     * Collect all form data\n     */\n    collectFormData() {\n        const formData = {};\n        const form = document.getElementById('ai-universal-form');\n        \n        // Get all form inputs\n        const inputs = form.querySelectorAll('input, select, textarea');\n        \n        inputs.forEach(input => {\n            const key = input.name.replace('[]', '');\n            if (key && input.name !== '') {\n                formData[key] = this.getInputValue(input);\n            }\n        });\n        \n        return formData;\n    }\n    \n    /**\n     * Validate form data\n     */\n    async validateForm(formData) {\n        try {\n            const response = await fetch(`/admin/ai/api/features/${this.featureId}/validate-inputs`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n                },\n                body: JSON.stringify(formData)\n            });\n            \n            const result = await response.json();\n            \n            return {\n                valid: response.ok && result.valid,\n                errors: result.errors || {},\n                data: result.data\n            };\n            \n        } catch (error) {\n            console.error('Validation error:', error);\n            return {\n                valid: false,\n                errors: { _general: ['Validation failed'] }\n            };\n        }\n    }\n    \n    /**\n     * Process form data through API\n     */\n    async processForm(formData) {\n        const response = await fetch(`/admin/ai/api/features/${this.featureId}/process-form`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n            },\n            body: JSON.stringify(formData)\n        });\n        \n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        \n        // Handle the response (this could be AI generated content)\n        this.handleProcessResult(result);\n        \n        return result;\n    }\n    \n    /**\n     * Handle process result\n     */\n    handleProcessResult(result) {\n        // This method can be overridden or extended\n        console.log('Process result:', result);\n        \n        // Show success message\n        if (result.success) {\n            this.showSuccess(result.message || 'İşlem başarıyla tamamlandı');\n        }\n        \n        // Trigger event for custom handling\n        this.triggerEvent('processComplete', result);\n    }\n    \n    /**\n     * Setup conditional field display logic\n     */\n    setupConditionalFields() {\n        const conditionalInputs = document.querySelectorAll('[data-depends-on]');\n        \n        conditionalInputs.forEach(container => {\n            const dependsOn = JSON.parse(container.dataset.dependsOn);\n            \n            // Check initial state\n            this.updateConditionalField(container, dependsOn);\n        });\n    }\n    \n    /**\n     * Update conditional fields based on dependency\n     */\n    updateConditionalFields(changedInputKey, value) {\n        const conditionalInputs = document.querySelectorAll('[data-depends-on]');\n        \n        conditionalInputs.forEach(container => {\n            const dependsOn = JSON.parse(container.dataset.dependsOn);\n            \n            // Check if this field depends on the changed input\n            const dependency = dependsOn.find(dep => dep.field === changedInputKey);\n            if (dependency) {\n                this.updateConditionalField(container, dependsOn);\n            }\n        });\n    }\n    \n    /**\n     * Update single conditional field\n     */\n    updateConditionalField(container, dependsOn) {\n        let shouldShow = true;\n        \n        for (const dependency of dependsOn) {\n            const depValue = this.userInputs[dependency.field];\n            const operator = dependency.operator || 'equals';\n            const expectedValue = dependency.value;\n            \n            let conditionMet = false;\n            \n            switch (operator) {\n                case 'equals':\n                    conditionMet = depValue == expectedValue;\n                    break;\n                case 'not_equals':\n                    conditionMet = depValue != expectedValue;\n                    break;\n                case 'contains':\n                    conditionMet = Array.isArray(depValue) \n                        ? depValue.includes(expectedValue)\n                        : String(depValue).includes(expectedValue);\n                    break;\n                case 'not_empty':\n                    conditionMet = depValue && depValue.toString().trim() !== '';\n                    break;\n                case 'empty':\n                    conditionMet = !depValue || depValue.toString().trim() === '';\n                    break;\n                default:\n                    conditionMet = depValue == expectedValue;\n            }\n            \n            if (!conditionMet) {\n                shouldShow = false;\n                break;\n            }\n        }\n        \n        // Show/hide with animation\n        if (shouldShow) {\n            container.style.display = 'block';\n            container.style.opacity = '0';\n            setTimeout(() => {\n                container.style.opacity = '1';\n            }, 10);\n        } else {\n            container.style.opacity = '0';\n            setTimeout(() => {\n                container.style.display = 'none';\n            }, 200);\n        }\n    }\n    \n    /**\n     * Initialize form plugins (Choices.js, etc.)\n     */\n    initializePlugins() {\n        // Initialize Choices.js for select elements (if available)\n        if (typeof Choices !== 'undefined') {\n            const selectElements = document.querySelectorAll('.form-select');\n            selectElements.forEach(select => {\n                if (!select.dataset.choicesInitialized) {\n                    new Choices(select, {\n                        searchEnabled: select.options.length > 5,\n                        itemSelectText: ''\n                    });\n                    select.dataset.choicesInitialized = 'true';\n                }\n            });\n        }\n        \n        // Initialize any other plugins as needed\n        this.initializeTooltips();\n    }\n    \n    /**\n     * Initialize Bootstrap tooltips\n     */\n    initializeTooltips() {\n        if (typeof bootstrap !== 'undefined') {\n            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n            const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n        }\n    }\n    \n    /**\n     * Setup auto-save functionality\n     */\n    setupAutoSave() {\n        this.autoSaveKey = `ai_form_autosave_${this.featureId}`;\n        \n        // Load saved data\n        this.loadAutoSaveData();\n        \n        // Save on page unload\n        window.addEventListener('beforeunload', () => {\n            this.saveAutoSaveData();\n        });\n    }\n    \n    /**\n     * Schedule auto-save\n     */\n    scheduleAutoSave() {\n        if (this.autoSaveTimeout) {\n            clearTimeout(this.autoSaveTimeout);\n        }\n        \n        this.autoSaveTimeout = setTimeout(() => {\n            this.saveAutoSaveData();\n        }, this.autoSaveDelay);\n    }\n    \n    /**\n     * Save form data to localStorage\n     */\n    saveAutoSaveData() {\n        if (!this.enableAutoSave) return;\n        \n        const formData = this.collectFormData();\n        localStorage.setItem(this.autoSaveKey, JSON.stringify({\n            data: formData,\n            timestamp: Date.now()\n        }));\n    }\n    \n    /**\n     * Load form data from localStorage\n     */\n    loadAutoSaveData() {\n        if (!this.enableAutoSave) return;\n        \n        const saved = localStorage.getItem(this.autoSaveKey);\n        if (!saved) return;\n        \n        try {\n            const { data, timestamp } = JSON.parse(saved);\n            \n            // Check if data is not too old (24 hours)\n            if (Date.now() - timestamp > 24 * 60 * 60 * 1000) {\n                localStorage.removeItem(this.autoSaveKey);\n                return;\n            }\n            \n            // Apply saved data\n            Object.keys(data).forEach(key => {\n                const input = document.querySelector(`[name=\"${key}\"], [name=\"${key}[]\"]`);\n                if (input && data[key] !== '') {\n                    if (input.type === 'checkbox') {\n                        if (Array.isArray(data[key])) {\n                            data[key].forEach(value => {\n                                const checkbox = document.querySelector(`[name=\"${key}[]\"][value=\"${value}\"]`);\n                                if (checkbox) checkbox.checked = true;\n                            });\n                        } else {\n                            input.checked = data[key];\n                        }\n                    } else if (input.type === 'radio') {\n                        const radio = document.querySelector(`[name=\"${key}\"][value=\"${data[key]}\"]`);\n                        if (radio) radio.checked = true;\n                    } else {\n                        input.value = data[key];\n                    }\n                    \n                    this.userInputs[key] = data[key];\n                }\n            });\n            \n            this.showInfo('Önceki form verileriniz geri yüklendi.');\n            \n        } catch (error) {\n            console.error('Auto-save data load error:', error);\n            localStorage.removeItem(this.autoSaveKey);\n        }\n    }\n    \n    /**\n     * Clear form\n     */\n    clearForm() {\n        const form = document.getElementById('ai-universal-form');\n        if (!form) return;\n        \n        // Reset form\n        form.reset();\n        \n        // Clear user inputs\n        this.userInputs = {};\n        \n        // Clear validation errors\n        this.clearValidationErrors();\n        \n        // Clear auto-save data\n        if (this.enableAutoSave && this.autoSaveKey) {\n            localStorage.removeItem(this.autoSaveKey);\n        }\n        \n        // Reset conditional fields\n        this.setupConditionalFields();\n        \n        // Apply defaults\n        this.loadSmartDefaults();\n        \n        this.triggerEvent('formCleared');\n    }\n    \n    /**\n     * Display validation errors\n     */\n    displayValidationErrors(errors) {\n        Object.keys(errors).forEach(field => {\n            const input = document.querySelector(`[name=\"${field}\"], [name=\"${field}[]\"]`);\n            if (input) {\n                input.classList.add('is-invalid');\n                const feedback = document.getElementById(input.id + '_feedback');\n                if (feedback) {\n                    feedback.textContent = errors[field][0];\n                }\n            }\n        });\n        \n        this.validationErrors = errors;\n        this.showError('Lütfen form hatalarını düzeltin.');\n    }\n    \n    /**\n     * Clear validation errors\n     */\n    clearValidationErrors() {\n        const invalidInputs = document.querySelectorAll('.is-invalid');\n        invalidInputs.forEach(input => {\n            input.classList.remove('is-invalid');\n            const feedback = document.getElementById(input.id + '_feedback');\n            if (feedback) {\n                feedback.textContent = '';\n            }\n        });\n        \n        this.validationErrors = {};\n    }\n    \n    /**\n     * Clear validation error for specific field\n     */\n    clearFieldValidationError(input) {\n        input.classList.remove('is-invalid');\n        const feedback = document.getElementById(input.id + '_feedback');\n        if (feedback) {\n            feedback.textContent = '';\n        }\n        \n        const fieldName = input.name.replace('[]', '');\n        if (this.validationErrors[fieldName]) {\n            delete this.validationErrors[fieldName];\n        }\n    }\n    \n    /**\n     * Set submit button state\n     */\n    setSubmitButtonState(isLoading) {\n        const submitBtn = document.getElementById('submitFormBtn');\n        const submitText = submitBtn.querySelector('.submit-text');\n        \n        if (isLoading) {\n            submitBtn.disabled = true;\n            submitBtn.innerHTML = '<i class=\"spinner-border spinner-border-sm me-2\"></i>İşleniyor...';\n        } else {\n            submitBtn.disabled = false;\n            submitBtn.innerHTML = '<i class=\"ti ti-sparkles me-1\"></i><span class=\"submit-text\">AI ile İşle</span>';\n        }\n    }\n    \n    /**\n     * Show loading state\n     */\n    showLoading() {\n        this.isLoading = true;\n        this.container.innerHTML = this.loadingTemplate;\n    }\n    \n    /**\n     * Hide loading state\n     */\n    hideLoading() {\n        this.isLoading = false;\n        // Loading template will be replaced by renderForm()\n    }\n    \n    /**\n     * Get default loading template\n     */\n    getDefaultLoadingTemplate() {\n        return `\n            <div class=\"form-loader text-center p-5\">\n                <div class=\"spinner-border text-primary mb-3\" role=\"status\">\n                    <span class=\"visually-hidden\">Yükleniyor...</span>\n                </div>\n                <p class=\"text-muted\">Form yapısı yükleniyor...</p>\n            </div>\n        `;\n    }\n    \n    /**\n     * Show success message\n     */\n    showSuccess(message) {\n        if (typeof toastr !== 'undefined') {\n            toastr.success(message);\n        } else {\n            alert(message);\n        }\n    }\n    \n    /**\n     * Show error message\n     */\n    showError(message) {\n        if (typeof toastr !== 'undefined') {\n            toastr.error(message);\n        } else {\n            alert(message);\n        }\n    }\n    \n    /**\n     * Show info message\n     */\n    showInfo(message) {\n        if (typeof toastr !== 'undefined') {\n            toastr.info(message);\n        } else {\n            console.info(message);\n        }\n    }\n    \n    /**\n     * Format group name\n     */\n    formatGroupName(groupKey) {\n        return groupKey.charAt(0).toUpperCase() + groupKey.slice(1).replace(/[_-]/g, ' ');\n    }\n    \n    /**\n     * Trigger custom event\n     */\n    triggerEvent(eventName, data = {}) {\n        const event = new CustomEvent(`universalForm:${eventName}`, {\n            detail: { ...data, formBuilder: this },\n            bubbles: true\n        });\n        \n        document.dispatchEvent(event);\n    }\n    \n    /**\n     * Destroy form builder\n     */\n    destroy() {\n        // Clear auto-save timeout\n        if (this.autoSaveTimeout) {\n            clearTimeout(this.autoSaveTimeout);\n        }\n        \n        // Remove event listeners\n        const form = document.getElementById('ai-universal-form');\n        if (form) {\n            form.removeEventListener('submit', this.handleFormSubmit);\n            form.removeEventListener('change', this.handleInputChange);\n            form.removeEventListener('input', this.handleInputChange);\n        }\n        \n        // Clear container\n        if (this.container) {\n            this.container.innerHTML = '';\n        }\n        \n        this.triggerEvent('destroyed');\n    }\n    \n    /**\n     * Refresh form (reload from API)\n     */\n    async refresh() {\n        await this.init();\n        this.triggerEvent('refreshed');\n    }\n    \n    /**\n     * Get current form state\n     */\n    getFormState() {\n        return {\n            featureId: this.featureId,\n            formData: this.formData,\n            userInputs: this.userInputs,\n            validationErrors: this.validationErrors,\n            isLoading: this.isLoading,\n            isSubmitting: this.isSubmitting\n        };\n    }\n}\n\n// Export for module systems\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = UniversalFormBuilder;\n}\n\n// Global assignment for direct script inclusion\nif (typeof window !== 'undefined') {\n    window.UniversalFormBuilder = UniversalFormBuilder;\n}\n\n// jQuery plugin (optional)\nif (typeof $ !== 'undefined') {\n    $.fn.universalFormBuilder = function(featureId, options) {\n        return this.each(function() {\n            const $this = $(this);\n            let instance = $this.data('universalFormBuilder');\n            \n            if (!instance) {\n                instance = new UniversalFormBuilder(featureId, this[0], options);\n                $this.data('universalFormBuilder', instance);\n            }\n            \n            return instance;\n        });\n    };\n}