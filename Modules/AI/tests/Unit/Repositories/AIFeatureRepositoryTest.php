<?php

declare(strict_types=1);

namespace Modules\AI\Tests\Feature\Api;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\{RateLimiter, Cache};
use Modules\AI\App\Models\{AIFeature, AICreditUsage};
use Modules\AI\App\Services\AICreditService;
use Laravel\Sanctum\Sanctum;
use App\Models\User;

/**
 * Public AI Controller API Test Suite
 * 
 * Tests the public API endpoints including:
 * - Rate limiting functionality
 * - Guest and authenticated user access
 * - Error handling
 * - Feature-specific requests
 * - Credit system integration
 */
class PublicAIControllerTest extends TestCase
{
    use RefreshDatabase;
    
    private AIFeature $publicFeature;
    private AIFeature $privateFeature;
    private User $testUser;
    
    protected function setUp(): void
    {
        parent::setUp();
        
        // Create test features
        $this->publicFeature = AIFeature::factory()->create([
            'slug' => 'public-translation',
            'name' => json_encode(['tr' => 'Çeviri', 'en' => 'Translation']),
            'description' => json_encode(['tr' => 'Metin çevirisi', 'en' => 'Text translation']),
            'is_active' => true,
            'is_public' => true,
            'category' => 'language',
        ]);
        
        $this->privateFeature = AIFeature::factory()->create([
            'slug' => 'private-analysis',
            'name' => json_encode(['tr' => 'Özel Analiz', 'en' => 'Private Analysis']),
            'is_active' => true,
            'is_public' => false,
        ]);
        
        // Create test user
        $this->testUser = User::factory()->create();
        
        // Clear rate limiters
        RateLimiter::clear('public-ai-chat:' . request()->ip());
        RateLimiter::clear('public-ai-feature:' . request()->ip() . ':' . $this->publicFeature->slug);
    }
    
    /** @test */\n    public function it_returns_system_status()\n    {\n        $response = $this->getJson('/api/ai/v1/status');\n        \n        $response->assertStatus(200)\n            ->assertJson([\n                'success' => true,\n                'data' => [\n                    'status' => 'operational',\n                    'version' => '2.0',\n                    'features_available' => true,\n                    'public_access' => true,\n                ]\n            ])\n            ->assertJsonStructure([\n                'success',\n                'data' => [\n                    'status',\n                    'version', \n                    'features_available',\n                    'public_access',\n                    'timestamp'\n                ]\n            ]);\n    }\n    \n    /** @test */\n    public function it_returns_public_features_list()\n    {\n        $response = $this->getJson('/api/ai/v1/features/public');\n        \n        $response->assertStatus(200)\n            ->assertJson([\n                'success' => true,\n            ])\n            ->assertJsonStructure([\n                'success',\n                'data' => [\n                    'features' => [\n                        '*' => [\n                            'slug',\n                            'name',\n                            'description',\n                            'icon',\n                            'category'\n                        ]\n                    ],\n                    'total'\n                ]\n            ]);\n        \n        $features = $response->json('data.features');\n        \n        // All returned features should be public\n        foreach ($features as $feature) {\n            $this->assertArrayHasKey('slug', $feature);\n            $this->assertArrayHasKey('name', $feature);\n            $this->assertArrayHasKey('description', $feature);\n        }\n        \n        // Should include our public feature\n        $featureSlugs = array_column($features, 'slug');\n        $this->assertContains('public-translation', $featureSlugs);\n        \n        // Should NOT include private feature\n        $this->assertNotContains('private-analysis', $featureSlugs);\n    }\n    \n    /** @test */\n    public function it_handles_public_chat_requests()\n    {\n        $requestData = [\n            'message' => 'Hello, can you help me with translation?',\n            'feature' => 'public-translation',\n            'context' => [\n                'session_id' => 'test-session-123'\n            ]\n        ];\n        \n        $response = $this->postJson('/api/ai/v1/chat', $requestData);\n        \n        $response->assertStatus(200)\n            ->assertJson([\n                'success' => true,\n            ])\n            ->assertJsonStructure([\n                'success',\n                'data' => [\n                    'message',\n                    'feature_used',\n                    'remaining_requests',\n                    'credits_used',\n                    'response_id'\n                ]\n            ]);\n        \n        $data = $response->json('data');\n        $this->assertIsString($data['message']);\n        $this->assertIsNumeric($data['remaining_requests']);\n        $this->assertEquals(0, $data['credits_used']); // Public access is free\n        $this->assertLessThan(10, $data['remaining_requests']); // Rate limit applied\n    }\n    \n    /** @test */\n    public function it_enforces_rate_limits_on_public_chat()\n    {\n        $requestData = [\n            'message' => 'Test message',\n        ];\n        \n        // Make requests up to the limit (10 requests per hour)\n        for ($i = 0; $i < 10; $i++) {\n            $response = $this->postJson('/api/ai/v1/chat', $requestData);\n            $response->assertStatus(200);\n        }\n        \n        // 11th request should be rate limited\n        $response = $this->postJson('/api/ai/v1/chat', $requestData);\n        \n        $response->assertStatus(429)\n            ->assertJson([\n                'success' => false,\n                'error' => 'Rate limit exceeded. Please try again later.',\n            ])\n            ->assertJsonStructure([\n                'success',\n                'error',\n                'retry_after'\n            ]);\n    }\n    \n    /** @test */\n    public function it_validates_public_chat_input()\n    {\n        // Test missing message\n        $response = $this->postJson('/api/ai/v1/chat', []);\n        $response->assertStatus(422);\n        \n        // Test message too short\n        $response = $this->postJson('/api/ai/v1/chat', [\n            'message' => 'Hi'\n        ]);\n        $response->assertStatus(422);\n        \n        // Test message too long\n        $response = $this->postJson('/api/ai/v1/chat', [\n            'message' => str_repeat('x', 501)\n        ]);\n        $response->assertStatus(422);\n        \n        // Test invalid feature\n        $response = $this->postJson('/api/ai/v1/chat', [\n            'message' => 'Valid message',\n            'feature' => 'nonexistent-feature'\n        ]);\n        $response->assertStatus(404)\n            ->assertJson([\n                'success' => false,\n                'error' => 'Feature not found or not public'\n            ]);\n    }\n    \n    /** @test */\n    public function it_handles_public_feature_requests()\n    {\n        $requestData = [\n            'input' => 'Hello world, how are you?',\n            'options' => [\n                'target_language' => 'tr',\n                'format' => 'formal'\n            ]\n        ];\n        \n        $response = $this->postJson(\"/api/ai/v1/feature/{$this->publicFeature->slug}\", $requestData);\n        \n        $response->assertStatus(200)\n            ->assertJson([\n                'success' => true,\n            ])\n            ->assertJsonStructure([\n                'success',\n                'data' => [\n                    'response',\n                    'feature' => [\n                        'slug',\n                        'name',\n                        'description'\n                    ],\n                    'formatted_response',\n                    'remaining_requests',\n                    'execution_time'\n                ]\n            ]);\n        \n        $data = $response->json('data');\n        $this->assertEquals($this->publicFeature->slug, $data['feature']['slug']);\n        $this->assertIsString($data['response']);\n        $this->assertIsNumeric($data['remaining_requests']);\n        $this->assertLessThan(5, $data['remaining_requests']); // Feature rate limit applied\n    }\n    \n    /** @test */\n    public function it_enforces_rate_limits_on_public_features()\n    {\n        $requestData = [\n            'input' => 'Test input',\n        ];\n        \n        // Make requests up to the limit (5 requests per hour per feature)\n        for ($i = 0; $i < 5; $i++) {\n            $response = $this->postJson(\"/api/ai/v1/feature/{$this->publicFeature->slug}\", $requestData);\n            $response->assertStatus(200);\n        }\n        \n        // 6th request should be rate limited\n        $response = $this->postJson(\"/api/ai/v1/feature/{$this->publicFeature->slug}\", $requestData);\n        \n        $response->assertStatus(429)\n            ->assertJson([\n                'success' => false,\n                'error' => 'Feature rate limit exceeded',\n            ]);\n    }\n    \n    /** @test */\n    public function it_rejects_requests_for_private_features()\n    {\n        $requestData = [\n            'input' => 'Test input',\n        ];\n        \n        $response = $this->postJson(\"/api/ai/v1/feature/{$this->privateFeature->slug}\", $requestData);\n        \n        $response->assertStatus(404)\n            ->assertJson([\n                'success' => false,\n                'error' => 'Feature not found or not available publicly'\n            ]);\n    }\n    \n    /** @test */\n    public function it_rejects_requests_for_nonexistent_features()\n    {\n        $requestData = [\n            'input' => 'Test input',\n        ];\n        \n        $response = $this->postJson('/api/ai/v1/feature/nonexistent-feature', $requestData);\n        \n        $response->assertStatus(404);\n    }\n    \n    /** @test */\n    public function it_handles_authenticated_user_chat()\n    {\n        Sanctum::actingAs($this->testUser);\n        \n        // Mock credit service\n        $creditService = $this->mock(AICreditService::class);\n        $creditService->shouldReceive('getUserCredits')\n            ->with($this->testUser->id)\n            ->andReturn(100); // User has 100 credits\n            \n        $creditService->shouldReceive('deductCredits')\n            ->once()\n            ->andReturn(true);\n        \n        $requestData = [\n            'message' => 'Can you help me with advanced analysis?',\n            'feature' => 'public-translation',\n            'context' => [\n                'expertise_level' => 'intermediate'\n            ]\n        ];\n        \n        $response = $this->postJson('/api/ai/v1/chat/user', $requestData);\n        \n        $response->assertStatus(200)\n            ->assertJson([\n                'success' => true,\n            ])\n            ->assertJsonStructure([\n                'success',\n                'data' => [\n                    'message',\n                    'credits_used',\n                    'credits_remaining', \n                    'feature_used',\n                    'response_id'\n                ]\n            ]);\n        \n        $data = $response->json('data');\n        $this->assertIsString($data['message']);\n        $this->assertIsNumeric($data['credits_used']);\n        $this->assertIsNumeric($data['credits_remaining']);\n        $this->assertGreaterThan(0, $data['credits_used']);\n    }\n    \n    /** @test */\n    public function it_rejects_authenticated_requests_with_insufficient_credits()\n    {\n        Sanctum::actingAs($this->testUser);\n        \n        // Mock credit service to return 0 credits\n        $creditService = $this->mock(AICreditService::class);\n        $creditService->shouldReceive('getUserCredits')\n            ->with($this->testUser->id)\n            ->andReturn(0); // User has no credits\n        \n        $requestData = [\n            'message' => 'Test message',\n        ];\n        \n        $response = $this->postJson('/api/ai/v1/chat/user', $requestData);\n        \n        $response->assertStatus(402) // Payment required\n            ->assertJson([\n                'success' => false,\n                'error' => 'Insufficient credits',\n                'credits_available' => 0\n            ]);\n    }\n    \n    /** @test */\n    public function it_requires_authentication_for_user_endpoints()\n    {\n        $requestData = [\n            'message' => 'Test message',\n        ];\n        \n        // Test user chat without authentication\n        $response = $this->postJson('/api/ai/v1/chat/user', $requestData);\n        $response->assertStatus(401);\n        \n        // Test credit balance without authentication\n        $response = $this->getJson('/api/ai/v1/credits/balance');\n        $response->assertStatus(401);\n    }\n    \n    /** @test */\n    public function it_returns_user_credit_balance()\n    {\n        Sanctum::actingAs($this->testUser);\n        \n        // Mock credit service\n        $creditService = $this->mock(AICreditService::class);\n        $creditService->shouldReceive('getUserCredits')\n            ->with($this->testUser->id)\n            ->andReturn(150);\n            \n        $mockUsage = collect([\n            (object)['feature_slug' => 'translation', 'credits_used' => 10, 'created_at' => now()],\n            (object)['feature_slug' => 'seo_analysis', 'credits_used' => 15, 'created_at' => now()],\n        ]);\n        \n        $creditService->shouldReceive('getRecentUsage')\n            ->with($this->testUser->id, 30)\n            ->andReturn($mockUsage);\n        \n        $response = $this->getJson('/api/ai/v1/credits/balance');\n        \n        $response->assertStatus(200)\n            ->assertJson([\n                'success' => true,\n            ])\n            ->assertJsonStructure([\n                'success',\n                'data' => [\n                    'credits_available',\n                    'recent_usage',\n                    'usage_summary' => [\n                        'last_30_days',\n                        'most_used_feature'\n                    ]\n                ]\n            ]);\n        \n        $data = $response->json('data');\n        $this->assertEquals(150, $data['credits_available']);\n        $this->assertIsArray($data['recent_usage']);\n        $this->assertEquals(25, $data['usage_summary']['last_30_days']);\n    }\n    \n    /** @test */\n    public function it_validates_authenticated_user_chat_input()\n    {\n        Sanctum::actingAs($this->testUser);\n        \n        // Test message too long\n        $response = $this->postJson('/api/ai/v1/chat/user', [\n            'message' => str_repeat('x', 1001)\n        ]);\n        $response->assertStatus(422);\n        \n        // Test invalid feature\n        $response = $this->postJson('/api/ai/v1/chat/user', [\n            'message' => 'Valid message',\n            'feature' => 'nonexistent-feature'\n        ]);\n        // Should still work but ignore invalid feature\n        $response->assertStatus(200);\n    }\n    \n    /** @test */\n    public function it_logs_public_usage_for_analytics()\n    {\n        $requestData = [\n            'message' => 'Test message for analytics',\n        ];\n        \n        $response = $this->postJson('/api/ai/v1/chat', $requestData);\n        $response->assertStatus(200);\n        \n        // Verify usage is logged in database\n        $this->assertDatabaseHas('ai_credit_usage', [\n            'user_id' => null, // Guest user\n            'feature_slug' => 'public-chat',\n            'credits_used' => 0, // Public access is free\n        ]);\n    }\n    \n    /** @test */\n    public function it_logs_public_feature_usage()\n    {\n        $requestData = [\n            'input' => 'Test input for analytics',\n        ];\n        \n        $response = $this->postJson(\"/api/ai/v1/feature/{$this->publicFeature->slug}\", $requestData);\n        $response->assertStatus(200);\n        \n        // Verify usage is logged\n        $this->assertDatabaseHas('ai_credit_usage', [\n            'user_id' => null,\n            'feature_slug' => $this->publicFeature->slug,\n            'credits_used' => 0,\n        ]);\n    }\n    \n    /** @test */\n    public function it_handles_service_exceptions_gracefully()\n    {\n        // Mock the AI service to throw an exception\n        $this->mock(\\Modules\\AI\\App\\Services\\AIService::class)\n            ->shouldReceive('processRequest')\n            ->andThrow(new \\Exception('Service temporarily unavailable'));\n        \n        $requestData = [\n            'message' => 'Test message',\n        ];\n        \n        $response = $this->postJson('/api/ai/v1/chat', $requestData);\n        \n        $response->assertStatus(500)\n            ->assertJson([\n                'success' => false,\n                'error' => 'An error occurred while processing your request'\n            ]);\n    }\n    \n    /** @test */\n    public function it_respects_feature_validation_and_processing()\n    {\n        $requestData = [\n            'input' => 'Process this text',\n            'options' => [\n                'custom_param' => 'test_value'\n            ]\n        ];\n        \n        $response = $this->postJson(\"/api/ai/v1/feature/{$this->publicFeature->slug}\", $requestData);\n        \n        $response->assertStatus(200);\n        \n        $data = $response->json('data');\n        \n        // Should contain the feature information\n        $this->assertArrayHasKey('feature', $data);\n        $this->assertEquals($this->publicFeature->slug, $data['feature']['slug']);\n        $this->assertIsString($data['feature']['name']);\n        $this->assertIsString($data['feature']['description']);\n    }\n}","structuredPatch":[]}</function_results>

<function_calls>
<invoke name="mcp__claude-code-server__TodoWrite">
<parameter name="todos">[{"id": "1", "content": "API Documentation sistemi güncelle - OpenAPI/Swagger tamamlandı", "status": "completed"}, {"id": "2", "content": "Provider Optimization Service V2 oluştur - Gerçek zamanlı analiz", "status": "completed"}, {"id": "3", "content": "Repository Pattern refactoring - Multi-layer caching", "status": "completed"}, {"id": "4", "content": "Test Suite genişletme - Unit/Integration testler", "status": "completed"}, {"id": "5", "content": "Chat Service V2 mimarisi - WebSocket real-time", "status": "in_progress"}, {"id": "6", "content": "Monitoring & Analytics dashboard", "status": "pending"}]