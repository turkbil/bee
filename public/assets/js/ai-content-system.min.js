/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/assets/js/ai-content-system.js":
/*!***********************************************!*\
  !*** ./public/assets/js/ai-content-system.js ***!
  \***********************************************/
/***/ (() => {

eval("{function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * AI Content Generation System - Global Universal Editor Support\n * T√ºm mod√ºllerde √ßalƒ±≈üƒ±r (Page, Blog, Portfolio, etc.)\n * HugeRTE + TinyMCE + Textarea universal detection\n */\nvar AIContentGenerationSystem = /*#__PURE__*/function () {\n  function AIContentGenerationSystem() {\n    var _document$querySelect;\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, AIContentGenerationSystem);\n    this.config = _objectSpread({\n      module: config.module || 'page',\n      baseUrl: config.baseUrl || '/admin',\n      csrfToken: ((_document$querySelect = document.querySelector('meta[name=\"csrf-token\"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.content) || '',\n      targetComponent: config.targetComponent || null\n    }, config);\n    this.modal = null;\n    this.jobId = null;\n    this.progressInterval = null;\n    this.startTime = null;\n    this.isGenerating = false;\n\n    // üÜï File Upload Properties\n    this.uploadedFiles = [];\n    this.analysisResults = {};\n\n    // Setup error handling\n    this.setupLivewireErrorHandling();\n    this.init();\n  }\n\n  /**\n   * Config g√ºncelle (modal a√ßƒ±lƒ±rken)\n   */\n  return _createClass(AIContentGenerationSystem, [{\n    key: \"configure\",\n    value: function configure() {\n      var newConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.config = _objectSpread(_objectSpread({}, this.config), newConfig);\n      console.log('üîß AI Content System config g√ºncellendi:', this.config);\n    }\n\n    /**\n     * Sistemi ba≈ülat\n     */\n  }, {\n    key: \"init\",\n    value: (function () {\n      var _init = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.n) {\n            case 0:\n              console.log('üöÄ AI Content Generation System ba≈ülatƒ±lƒ±yor...');\n\n              // Modal'ƒ± bul\n              this.modal = document.getElementById('aiContentModal');\n              if (this.modal) {\n                _context.n = 1;\n                break;\n              }\n              console.warn('‚ö†Ô∏è AI Content Modal bulunamadƒ±');\n              return _context.a(2);\n            case 1:\n              this.setupEventListeners();\n              console.log('‚úÖ AI Content Generation System hazƒ±r!');\n            case 2:\n              return _context.a(2);\n          }\n        }, _callee, this);\n      }));\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n    /**\n     * Event listener'larƒ± kur\n     */\n    )\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this = this;\n      // Generate button\n      var generateBtn = document.getElementById('startGeneration');\n      if (generateBtn) {\n        // DEBOUNCE VE DUPLICATE √ñNLEME ƒ∞√áƒ∞N ONCE EVENT HANDLER KULLAN\n        generateBtn.addEventListener('click', function (e) {\n          e.preventDefault();\n          e.stopPropagation();\n\n          // Butonu anƒ±nda devre dƒ±≈üƒ± bƒ±rak\n          if (generateBtn.disabled) {\n            console.warn('‚ö†Ô∏è Button zaten disabled!');\n            return;\n          }\n\n          // Double-click √∂nleme\n          if (_this.isGenerating) {\n            console.warn('‚ö†Ô∏è Generation zaten aktif!');\n            return;\n          }\n\n          // Butonu hemen disable et\n          generateBtn.disabled = true;\n          generateBtn.classList.add('disabled', 'opacity-50');\n\n          // startGeneration'ƒ± √ßaƒüƒ±r\n          _this.startGeneration()[\"catch\"](function (error) {\n            console.error('Generation error:', error);\n            // Hata durumunda butonu tekrar enable et\n            generateBtn.disabled = false;\n            generateBtn.classList.remove('disabled', 'opacity-50');\n          });\n        }, {\n          once: false\n        }); // Her click i√ßin √ßalƒ±≈üsƒ±n ama kontrol etsin\n      }\n\n      // Cancel button\n      var cancelBtn = document.getElementById('cancelButton');\n      if (cancelBtn) {\n        cancelBtn.addEventListener('click', function () {\n          return _this.closeModal();\n        });\n      }\n\n      // Modal events - Enhanced editor state preservation\n      if (this.modal) {\n        this.modal.addEventListener('show.bs.modal', function () {\n          console.log('üìñ AI Content modal a√ßƒ±lƒ±yor');\n\n          // HugeRTE edit√∂r√ºn mevcut durumunu kaydet\n          _this.preserveEditorState();\n        });\n        this.modal.addEventListener('shown.bs.modal', function () {\n          console.log('üìñ AI Content modal a√ßƒ±ldƒ±');\n\n          // Modal tamamen a√ßƒ±ldƒ±ktan sonra edit√∂r durumunu kontrol et\n          _this.ensureEditorStability();\n        });\n        this.modal.addEventListener('hide.bs.modal', function () {\n          console.log('üìñ AI Content modal kapanƒ±yor');\n\n          // Modal kapanmadan √∂nce edit√∂r durumunu hazƒ±rla\n          _this.prepareEditorForModalClose();\n\n          // Backdrop temizleme - global function kullan\n          if (typeof window.cleanModalBackdrop === 'function') {\n            setTimeout(function () {\n              window.cleanModalBackdrop();\n            }, 100);\n          }\n        });\n        this.modal.addEventListener('hidden.bs.modal', function () {\n          console.log('üìñ AI Content modal kapandƒ±');\n\n          // Modal tamamen kapandƒ±ktan sonra edit√∂r√º restore et\n          _this.restoreEditorState();\n          _this.resetModal();\n          // √ñNEMLI: analysisResults'u temizleme! PDF analizi bir sonraki a√ßƒ±lƒ±≈üta kullanƒ±labilir olmalƒ±\n          // this.analysisResults = {}; // DEVRE DI≈ûI BIRAKILIYOR\n          console.log('üìñ PDF analizi korundu');\n        });\n      }\n      console.log('üì° Event listeners kuruldu');\n    }\n\n    /**\n     * ƒ∞√ßerik √ºretimi ba≈ülat - Enhanced with file support\n     */\n  }, {\n    key: \"startGeneration\",\n    value: (function () {\n      var _startGeneration = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var _document$getElementB, _document$getElementB2;\n        var contentTopic, replaceExisting, hasFileAnalysis, hasUploadedFiles, isAnalysisInProgress, hasContentTopic, progressArea, fileType, isLayoutPreserve, targetField, response, result, _t;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.p = _context2.n) {\n            case 0:\n              if (!this.isGenerating) {\n                _context2.n = 1;\n                break;\n              }\n              console.warn('‚ö†Ô∏è ƒ∞√ßerik √ºretimi zaten devam ediyor!');\n              return _context2.a(2);\n            case 1:\n              // √ñNCE: Aktif progress interval varsa temizle (duplicate job √∂nleme)\n              if (this.progressInterval) {\n                console.log('‚ö†Ô∏è √ñnceki progress tracking durduruluyor...');\n                clearInterval(this.progressInterval);\n                this.progressInterval = null;\n              }\n              contentTopic = (_document$getElementB = document.getElementById('contentTopic')) === null || _document$getElementB === void 0 || (_document$getElementB = _document$getElementB.value) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.trim();\n              replaceExisting = ((_document$getElementB2 = document.getElementById('replaceExisting')) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.checked) || false; // GLOBAL STORAGE'DAN AL - KAYBOLMASIN!\n              if (window.aiPdfAnalysisResults && Object.keys(window.aiPdfAnalysisResults).length > 0) {\n                this.analysisResults = window.aiPdfAnalysisResults;\n                console.log('üì¶ Analysis results restored from global storage');\n              }\n\n              // File analysis varsa onu da kontrol et\n              hasFileAnalysis = this.analysisResults && Object.keys(this.analysisResults).length > 0; // üîç ENHANCED: PDF y√ºklenmi≈ü ama analiz devam ediyor mu?\n              hasUploadedFiles = document.querySelector('.file-upload-info .alert') !== null;\n              isAnalysisInProgress = this.analysisId && !hasFileAnalysis; // üö® ZORUNLU KONTROL: En az biri dolu olmalƒ± - yazƒ± alanƒ± VEYA dosya VEYA analiz devam ediyor\n              hasContentTopic = contentTopic && contentTopic.length > 0;\n              if (!(!hasContentTopic && !hasFileAnalysis && !hasUploadedFiles)) {\n                _context2.n = 2;\n                break;\n              }\n              console.warn('‚ö†Ô∏è Hem yazƒ± alanƒ± hem dosya alanƒ± bo≈ü!');\n              this.showInlineWarning('L√ºtfen i√ßerik konusu yazƒ±n veya dosya y√ºkleyin!');\n              // BUTON DISABLE OLMAYACAK - sadece uyarƒ± ver ve devam et\n              this.setGeneratingState(false); // Buton'u tekrar enable et\n              return _context2.a(2);\n            case 2:\n              if (!(!hasFileAnalysis && this.analysisId)) {\n                _context2.n = 3;\n                break;\n              }\n              console.warn('‚è≥ PDF analizi devam ediyor; i√ßerik √ºretimi beklemeye alƒ±ndƒ± (brief olsa bile).');\n              this.pendingAutoGenerate = true;\n              // √ñNEMLI: isGenerating false kalsƒ±n, sadece UI'da waiting g√∂ster\n              this.updateProgress(5, 'PDF analizi s√ºr√ºyor, bittiƒüinde otomatik ba≈ülayacak...', 'waiting');\n\n              // Progress g√∂ster ama generating state'i set etme\n              progressArea = document.getElementById('contentProgress');\n              if (progressArea) progressArea.style.display = 'block';\n              return _context2.a(2);\n            case 3:\n              console.log('üîç ENHANCED DEBUG startGeneration:', {\n                contentTopic: contentTopic,\n                hasContentTopic: hasContentTopic,\n                hasFileAnalysis: hasFileAnalysis,\n                validationPassed: hasContentTopic || hasFileAnalysis,\n                analysisResults: this.analysisResults,\n                analysisResultsKeys: this.analysisResults ? Object.keys(this.analysisResults) : [],\n                analysisResultsType: _typeof(this.analysisResults),\n                analysisResultsStringified: this.analysisResults ? JSON.stringify(this.analysisResults).substring(0, 500) : 'null',\n                // Ekstra debug bilgileri\n                analysisResultsLength: this.analysisResults ? Object.keys(this.analysisResults).length : 0,\n                hasContent: this.analysisResults && this.analysisResults.content ? 'YES' : 'NO',\n                fileType: this.analysisResults && this.analysisResults.file_type ? this.analysisResults.file_type : 'NONE',\n                willSendToBackend: this.analysisResults && Object.keys(this.analysisResults).length > 0 ? 'YES' : 'NO'\n              });\n\n              // üÜï VARSAYILAN PDF PROMPT - Eƒüer sadece PDF y√ºklendi ve prompt girilmediyse\n              if (!contentTopic && hasFileAnalysis) {\n                // PDF'in t√ºr√ºne g√∂re otomatik prompt olu≈ütur\n                fileType = this.analysisResults.file_type || 'pdf';\n                isLayoutPreserve = this.getAnalysisType() === 'layout_preserve';\n                if (fileType.toLowerCase() === 'pdf') {\n                  // üöÄ ULTRA PREMIUM PDF‚ÜíLANDING CONVERTER - DIRECT & SIMPLE\n                  contentTopic = \"\\u26A0\\uFE0F H\\u0130\\xC7B\\u0130R A\\xC7IKLAMA/YORUM YAPMA! D\\u0130REKT HTML KOD \\xDCRET\\u0130LECEK!\\n\\nPDF \\u2192 ULTRA PREMIUM LANDING PAGE\\n\\nSTEP 1: HERO SECTION (Full screen)\\n<section class=\\\"relative min-h-screen flex items-center py-20 lg:py-40 bg-gradient-to-br from-orange-500 via-amber-500 to-yellow-600\\\">\\n  <div class=\\\"max-w-7xl mx-auto px-4 lg:px-8 text-center text-white\\\">\\n    <h1 class=\\\"text-4xl lg:text-8xl font-black tracking-tighter mb-6 lg:mb-8\\\">PDF'TEN ANA BA\\u015ELIK</h1>\\n    <p class=\\\"text-xl lg:text-3xl mb-8 lg:mb-12 leading-relaxed\\\">PDF'ten alt ba\\u015Fl\\u0131k</p>\\n    <div class=\\\"flex flex-col sm:flex-row gap-6 justify-center\\\">\\n      <button class=\\\"bg-white text-orange-600 px-12 py-4 rounded-2xl text-xl font-bold hover:scale-105 transition-transform\\\">Ana CTA</button>\\n      <button class=\\\"border-2 border-white text-white px-12 py-4 rounded-2xl text-xl font-bold hover:bg-white hover:text-orange-600 transition-all\\\">\\u0130kincil CTA</button>\\n    </div>\\n  </div>\\n</section>\\n\\nSTEP 2: FEATURES (Bento grid)\\n<section class=\\\"py-16 lg:py-32\\\">\\n  <div class=\\\"max-w-6xl mx-auto px-4 lg:px-8\\\">\\n    <h2 class=\\\"text-3xl lg:text-6xl font-bold text-center mb-12 lg:mb-20\\\">PDF'ten \\xD6zellikler</h2>\\n    <div class=\\\"grid grid-cols-1 lg:grid-cols-3 gap-8 lg:gap-12\\\">\\n      <!-- PDF'teki HER \\xF6zellik i\\xE7in glass card + CTA -->\\n      <div class=\\\"bg-white dark:bg-gray-800 backdrop-blur-md border border-gray-200 dark:border-gray-700 rounded-3xl p-6 lg:p-8 hover:scale-105 hover:shadow-2xl hover:-translate-y-2 transition-all duration-300 group\\\">\\n        <div class=\\\"text-4xl mb-4 text-orange-500 group-hover:scale-110 transition-transform\\\">\\n          <i class=\\\"fas fa-truck\\\"></i>\\n        </div>\\n        <h3 class=\\\"text-xl lg:text-2xl font-bold mb-4 text-gray-900 dark:text-white\\\">PDF \\xD6ZELL\\u0130K 1</h3>\\n        <p class=\\\"text-base lg:text-lg text-gray-600 dark:text-gray-300 mb-6\\\">PDF a\\xE7\\u0131klama</p>\\n        <button class=\\\"w-full bg-gradient-to-r from-orange-500 to-amber-500 text-white py-3 rounded-xl font-semibold hover:scale-105 hover:shadow-lg transition-all\\\">\\n          Detayl\\u0131 Bilgi \\u2192\\n        </button>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\\nSTEP 3: TECHNICAL SPECS (Premium table)\\n<section class=\\\"py-16 lg:py-32 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800/50 dark:to-gray-900/50\\\">\\n  <div class=\\\"max-w-5xl mx-auto px-4 lg:px-8\\\">\\n    <h2 class=\\\"text-3xl lg:text-5xl font-bold text-center mb-10 lg:mb-16\\\">Teknik \\xD6zellikler</h2>\\n    <!-- PDF'teki T\\xDCM teknik veriler 1:1 AYNEN -->\\n    <div class=\\\"bg-white dark:bg-gray-900 rounded-3xl overflow-hidden shadow-2xl hover:shadow-3xl transition-shadow\\\">\\n      <table class=\\\"w-full divide-y divide-gray-200 dark:divide-gray-700\\\">\\n        <thead class=\\\"bg-gray-50 dark:bg-gray-800\\\">\\n          <tr>\\n            <th class=\\\"px-6 py-4 text-left text-gray-900 dark:text-white font-semibold\\\">\\xD6zellik</th>\\n            <th class=\\\"px-6 py-4 text-left text-gray-900 dark:text-white font-semibold\\\">De\\u011Fer</th>\\n          </tr>\\n        </thead>\\n        <tbody class=\\\"divide-y divide-gray-200 dark:divide-gray-700\\\">\\n          <tr class=\\\"hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors cursor-pointer\\\">\\n            <td class=\\\"px-6 py-4 text-gray-600 dark:text-gray-300\\\">PDF'den VER\\u0130</td>\\n            <td class=\\\"px-6 py-4 font-semibold text-gray-900 dark:text-white\\\">PDF'den DE\\u011EER</td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n  </div>\\n</section>\\n\\nSTEP 4: FINAL CTA (Orange gradient)\\n<section class=\\\"py-20 lg:py-40 bg-gradient-to-r from-orange-500 via-amber-500 to-yellow-600\\\">\\n  <div class=\\\"max-w-4xl mx-auto px-4 lg:px-8 text-center text-white\\\">\\n    <h2 class=\\\"text-3xl lg:text-6xl font-bold mb-6 lg:mb-8\\\">PDF'ten Son \\xC7a\\u011Fr\\u0131</h2>\\n    <p class=\\\"text-xl lg:text-2xl mb-8 lg:mb-12\\\">PDF'ten a\\xE7\\u0131klama</p>\\n    <button class=\\\"bg-white text-orange-600 px-10 lg:px-16 py-4 lg:py-6 rounded-2xl text-xl lg:text-2xl font-bold hover:scale-110 transition-transform shadow-2xl\\\">HEMEN \\u0130LET\\u0130\\u015E\\u0130M</button>\\n  </div>\\n</section>\\n\\nMUTLAK KURALLAR:\\n\\u2705 PDF'deki T\\xDCM veriyi kullan - sahte veri YASAK\\n\\u2705 Sekt\\xF6re g\\xF6re gradient (forklift\\u2192orange, teknoloji\\u2192blue, sa\\u011Fl\\u0131k\\u2192green)\\n\\u2705 Dark mode: T\\xFCm elementlerde dark: varyantlar\\u0131\\n\\u2705 Hover efektleri: hover:scale-105 hover:shadow-2xl hover:-translate-y-2\\n\\u2705 Glass morphism: backdrop-blur-lg bg-white/10\\n\\u2705 CTA butonlar: Gradient + hover:scale-110\\n\\u2705 Responsive: MOB\\u0130L/TABLET = AYNI! Sadece lg: (PC) kullan. \\xD6rnek: text-3xl lg:text-6xl\\n\\u2705 \\u0130konlar: FontAwesome (<i class=\\\"fas fa-truck\\\"></i>) veya inline SVG\\n\\u2705 Modern curves: rounded-3xl\\n\\nD\\u0130REKT HTML \\xDCRET\\u0130LECEK - A\\xC7IKLAMA YOK!\\n\\n\\u26D4 YASAKLAR (ASLA YAPMA):\\n- \\u274C Header/Navbar YASAK - Body i\\xE7eri\\u011Fi ba\\u015Flas\\u0131n\\n- \\u274C Footer YASAK - CTA ile bitir\\n- \\u274C Menu/Navigation YASAK\\n- \\u274C Logo alan\\u0131 YASAK\\n- \\u274C Copyright YASAK\\n- \\u274C Sayfa d\\u0131\\u015F\\u0131 linkler YASAK\\n- \\u274C Placeholder text YASAK (PDF'teki GER\\xC7EK veriyi kullan)\\n- \\u274C Lorem ipsum YASAK\\n- \\u274C Fake/uydurma bilgi YASAK\\n- \\u274C CDN link YASAK (inline Tailwind)\\n- \\u274C External dependencies YASAK\\n\\n\\u2705 ZORUNLU KURALLAR:\\n\\n\\uD83C\\uDFA8 AKILLI RENK PALET\\u0130 (PDF \\u0130\\xC7ER\\u0130\\u011E\\u0130NE G\\xD6RE):\\nPDF'deki \\xFCr\\xFCn/sekt\\xF6r analizi:\\n- \\uD83D\\uDE9B End\\xFCstriyel/Forklift/Transpalet \\u2192 Orange: from-orange-500 via-amber-500 to-yellow-600\\n- \\uD83D\\uDCBB Teknoloji/Yaz\\u0131l\\u0131m/IT \\u2192 Blue: from-blue-600 via-cyan-500 to-indigo-600\\n- \\uD83C\\uDFE5 Sa\\u011Fl\\u0131k/T\\u0131bbi cihaz \\u2192 Teal: from-teal-500 via-emerald-500 to-green-600\\n- \\uD83D\\uDCB0 Finans/Bankac\\u0131l\\u0131k \\u2192 Slate: from-slate-600 via-gray-600 to-zinc-700\\n- \\uD83D\\uDED2 E-ticaret/Retail \\u2192 Red: from-red-500 via-pink-500 to-rose-600\\n- \\uD83C\\uDFED \\u0130malat/\\xDCretim \\u2192 Steel: from-gray-700 via-zinc-600 to-slate-800\\n- \\uD83C\\uDFAF Varsay\\u0131lan/Bilinmeyen \\u2192 Blue: from-blue-600 via-indigo-600 to-purple-700\\n\\nGRADIENT ADVANCED USAGE:\\n- Hero: bg-gradient-to-br from-[ana-renk] via-[ara-renk]/80 to-[biti\\u015F-renk]\\n- CTA buttons: bg-gradient-to-r hover:bg-gradient-to-l transform hover:scale-105\\n- Cards: hover:bg-gradient-to-br transition-all duration-500\\n- Text gradients: bg-clip-text text-transparent bg-gradient-to-r\\n- Overlays: bg-gradient-to-t from-black/60 via-black/20 to-transparent\\n- Borders: border-gradient-to-r border-transparent bg-gradient-to-r from-[renk] to-transparent\\n\\n\\uD83C\\uDFD7\\uFE0F TASARIM ARK\\u0130TEKT\\xDCR\\xDC:\\n- White space philosophy: py-24, py-32, py-40 (hi\\xE7 s\\u0131k\\u0131\\u015F\\u0131k olmas\\u0131n)\\n- Container hierarchy: max-w-7xl (hero), max-w-6xl (content), max-w-4xl (text)\\n- Breathing rhythm: gap-12, gap-16, space-y-20\\n- Typography scale: text-6xl lg:text-8xl (hero), text-4xl lg:text-6xl (headings)\\n- Line height hierarchy: leading-tight (headings), leading-relaxed (body)\\n- Letter spacing: tracking-tighter (display), tracking-tight (headings)\\n\\n\\uD83C\\uDF13 DARK MODE MASTERY:\\nHer element i\\xE7in dark: variant ZORUNLU:\\n- Backgrounds: bg-white/dark:bg-gray-900, bg-gray-50/dark:bg-gray-800/50\\n- Text contrast: text-gray-900/dark:text-white, text-gray-700/dark:text-gray-300\\n- Subtle elements: text-gray-500/dark:text-gray-400\\n- Borders: border-gray-200/dark:border-gray-700\\n- Shadows: shadow-xl/dark:shadow-2xl dark:shadow-black/25\\n\\n\\uD83C\\uDFAD MODERN TAILWIND MASTERY:\\n- Backdrop effects: backdrop-blur-sm, backdrop-blur-md, backdrop-saturate-150\\n- Advanced gradients: conic-gradient, radial-gradient sim\\xFClasyonu\\n- Glass morphism: bg-white/10 backdrop-blur-md border border-white/20\\n- Shadows: shadow-2xl, drop-shadow-2xl, shadow-[custom]\\n- Modern curves: rounded-3xl, rounded-[2rem]\\n- Transform magic: hover:scale-110 hover:rotate-1 hover:-translate-y-4\\n- Advanced transitions: transition-all duration-700 ease-in-out\\n- Grid mastery: grid-cols-12, asymmetric spans (lg:col-span-7, lg:col-span-5)\\n- Aspect ratios: aspect-[16/9], aspect-[4/3], aspect-square\\n- Custom spacing: space-y-16, gap-x-24\\n\\n\\uD83D\\uDCF1 RESPONSIVE BREAKPOINT MASTERY:\\n- Mobile first: base styles\\n- Tablet optimize: md:, lg: strategic breakpoints\\n- Desktop enhance: xl:, 2xl: premium experience\\n- Container queries: @container where applicable\\n- Fluid typography: clamp() simulation with responsive scales\\n\\n\\uD83C\\uDFAF LANDING PAGE BLUEPRINT:\\n\\n<div class=\\\"min-h-screen bg-white dark:bg-gray-900 overflow-hidden\\\">\\n\\n    <!-- 1. HERO IMPACT - Full viewport, dramatic entrance -->\\n    <section class=\\\"relative min-h-screen flex items-center justify-center py-24\\\">\\n        <div class=\\\"absolute inset-0 bg-gradient-to-br from-[PDF-ana-renk]/20 via-[ara-renk]/10 to-[son-renk]/20\\\"></div>\\n        <div class=\\\"absolute inset-0 backdrop-blur-[1px]\\\"></div>\\n        <div class=\\\"relative z-10 max-w-7xl mx-auto px-6 lg:px-8 text-center\\\">\\n            <!-- PDF'ten: Ana ba\\u015Fl\\u0131k (text-6xl lg:text-8xl) -->\\n            <!-- PDF'ten: Alt ba\\u015Fl\\u0131k/slogan (text-xl lg:text-3xl) -->\\n            <!-- PDF'ten: Key selling points (3-5 bullet) -->\\n            <!-- CTA buttons: Primary + Secondary -->\\n        </div>\\n        <!-- Animated background elements -->\\n        <div class=\\\"absolute top-20 left-20 w-96 h-96 bg-gradient-to-br from-[ana-renk]/10 to-transparent rounded-full blur-3xl\\\"></div>\\n        <div class=\\\"absolute bottom-20 right-20 w-72 h-72 bg-gradient-to-br from-[ara-renk]/10 to-transparent rounded-full blur-3xl\\\"></div>\\n    </section>\\n\\n    <!-- 2. FEATURES SHOWCASE - Bento grid, cards symphony -->\\n    <section class=\\\"py-32 lg:py-40\\\">\\n        <div class=\\\"max-w-6xl mx-auto px-6\\\">\\n            <div class=\\\"text-center mb-20\\\">\\n                <h2 class=\\\"text-4xl lg:text-6xl font-bold mb-6\\\">PDF'TEN \\xD6ZELL\\u0130KLER BA\\u015ELI\\u011EI</h2>\\n                <p class=\\\"text-xl lg:text-2xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto\\\">PDF'ten a\\xE7\\u0131klama</p>\\n            </div>\\n            <div class=\\\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-12\\\">\\n                <!-- PDF'teki HER \\xF6zellik i\\xE7in card -->\\n                <!-- Card template: glass morphism + hover transforms -->\\n                <!-- Icons: Tailwind heroicons or custom SVG -->\\n                <!-- Asymmetric grid: baz\\u0131 kartlar lg:col-span-2 -->\\n            </div>\\n        </div>\\n    </section>\\n\\n    <!-- 3. TECHNICAL SPECS - Premium table design -->\\n    <section class=\\\"py-32 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800/50 dark:to-gray-900/50\\\">\\n        <div class=\\\"max-w-5xl mx-auto px-6\\\">\\n            <div class=\\\"text-center mb-16\\\">\\n                <h2 class=\\\"text-4xl lg:text-5xl font-bold mb-6\\\">Teknik \\xD6zellikler</h2>\\n            </div>\\n            <!-- PDF'teki T\\xDCM teknik de\\u011Ferler -->\\n            <!-- Modern table: rounded-2xl, alternating rows, hover effects -->\\n            <!-- Mobile responsive: stack on small screens -->\\n        </div>\\n    </section>\\n\\n    <!-- 4. DETAILED CONTENT - Typography paradise -->\\n    <section class=\\\"py-32\\\">\\n        <div class=\\\"max-w-4xl mx-auto px-6\\\">\\n            <div class=\\\"prose prose-xl dark:prose-invert max-w-none\\\">\\n                <!-- PDF'teki detayl\\u0131 a\\xE7\\u0131klamalar -->\\n                <!-- Custom prose styling: proper spacing, readable fonts -->\\n                <!-- Image placeholders if PDF has images -->\\n            </div>\\n        </div>\\n    </section>\\n\\n    <!-- 5. VISUAL SHOWCASE - Dynamic grid gallery -->\\n    <section class=\\\"py-32 bg-gradient-to-br from-[ana-renk]/5 to-[ara-renk]/5\\\">\\n        <div class=\\\"max-w-7xl mx-auto px-6\\\">\\n            <div class=\\\"text-center mb-20\\\">\\n                <h2 class=\\\"text-4xl lg:text-5xl font-bold mb-6\\\">G\\xF6rsel Galeri</h2>\\n            </div>\\n            <div class=\\\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\\\">\\n                <!-- Dynamic sized cards: some col-span-2, row-span-2 -->\\n                <!-- Placeholder for PDF images/diagrams -->\\n                <!-- Hover: scale + overlay effects -->\\n            </div>\\n        </div>\\n    </section>\\n\\n    <!-- 6. SOCIAL PROOF - Testimonials/stats if available in PDF -->\\n    <section class=\\\"py-32\\\">\\n        <div class=\\\"max-w-6xl mx-auto px-6\\\">\\n            <!-- PDF'te varsa: awards, certifications, stats -->\\n            <!-- Card carousel: horizontal scroll on mobile -->\\n        </div>\\n    </section>\\n\\n    <!-- 7. FINAL CTA - Conversion powerhouse -->\\n    <section class=\\\"py-40\\\">\\n        <div class=\\\"max-w-5xl mx-auto px-6 text-center\\\">\\n            <div class=\\\"relative\\\">\\n                <div class=\\\"absolute inset-0 bg-gradient-to-r from-[ana-renk] via-[ara-renk] to-[son-renk] rounded-3xl blur-xl opacity-30\\\"></div>\\n                <div class=\\\"relative bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm rounded-3xl p-16 border border-white/20\\\">\\n                    <!-- PDF'ten: Son \\xE7a\\u011Fr\\u0131 metni -->\\n                    <!-- Multiple CTA options -->\\n                    <!-- Contact/demo/pricing buttons -->\\n                </div>\\n            </div>\\n        </div>\\n    </section>\\n\\n</div>\\n\\n\\uD83C\\uDFA8 MICRO INTERACTION RULES:\\n- Buttons: hover:scale-105 active:scale-95 transition-transform duration-200\\n- Cards: hover:-translate-y-6 hover:shadow-2xl transition-all duration-500\\n- Links: hover:text-[marka-rengi] transition-colors duration-300\\n- Images: hover:scale-110 parent: overflow-hidden\\n- Text reveals: stagger animations simulation\\n- Scroll triggers: intersection observer ready markup\\n\\n\\uD83D\\uDCDD TYPOGRAPHY HIERARCHY:\\n- Display (Hero): text-6xl lg:text-8xl font-black tracking-tighter\\n- H1: text-4xl lg:text-6xl font-bold tracking-tight\\n- H2: text-3xl lg:text-5xl font-bold\\n- H3: text-2xl lg:text-4xl font-semibold\\n- Body Large: text-lg lg:text-xl leading-relaxed\\n- Body: text-base lg:text-lg leading-relaxed\\n- Small: text-sm text-gray-600 dark:text-gray-400\\n- Caption: text-xs uppercase tracking-wider font-medium\\n\\n\\uD83D\\uDD25 PREMIUM COMPONENT PATTERNS:\\n- Glass cards: bg-white/10 backdrop-blur-md border border-white/20\\n- Gradient borders: bg-gradient-to-r p-[1px] rounded-xl\\n- Floating elements: shadow-2xl shadow-[color]/25\\n- Layered backgrounds: multiple absolute positioned gradients\\n- Custom badges: inline-flex items-center px-3 py-1 rounded-full\\n- Progress indicators: w-full bg-gray-200 rounded-full h-2\\n- Testimonial cards: quote icons, avatar, sliding animations\\n\\n\\uD83D\\uDC8E ADVANCED LAYOUT TECHNIQUES:\\n- Asymmetric grids: 7/5 column splits\\n- Overlapping sections: negative margins\\n- Floating elements: absolute positioning with proper z-index\\n- Sticky elements: sticky positioning for nav elements\\n- Masonry simulation: CSS Grid with varying row heights\\n- Container queries ready: component-based responsive design\\n\\nOUTPUT REQUIREMENTS:\\n1. PDF'deki HER B\\u0130LG\\u0130Y\\u0130 KULLAN - hi\\xE7birini atla\\n2. Renk paletini PDF'deki \\xFCr\\xFCn sekt\\xF6r\\xFCne g\\xF6re belirle\\n3. Minimum 2000 sat\\u0131r ultra-premium kod\\n4. Dark mode her element i\\xE7in zorunlu\\n5. Modern gradients ve glass morphism kullan\\n6. Typography hierarchy'yi s\\u0131k\\u0131 takip et\\n7. Micro interactions her yerde\\n8. Responsive design m\\xFCkemmel olsun\\n9. Breathing space prensibi: hi\\xE7 s\\u0131k\\u0131\\u015F\\u0131k olmas\\u0131n\\n10. Performance: inline styles, no external deps\\n\\n\\uD83D\\uDE80 SON KONTROL:\\n- PDF i\\xE7eri\\u011Fi %100 kullan\\u0131ld\\u0131 m\\u0131?\\n- Renk paleti \\xFCr\\xFCn sekt\\xF6r\\xFCne uygun mu?\\n- Dark mode her yerde var m\\u0131?\\n- Typography hierarchy do\\u011Fru mu?\\n- Breathing space yeterli mi?\\n- Gradients modern mi?\\n- Micro interactions eksiksiz mi?\\n- Glass morphism applied?\\n- Mobile responsive perfect?\\n\\nRESULT: PDF'deki HER bilgiyi kullanarak, sekt\\xF6r\\xFCne uygun renklerle, modern design principles ile ULTRA PREMIUM landing page!\";\n                  console.log('üöÄ ULTRA GELƒ∞≈ûMƒ∞≈û PDF‚ÜíLanding prompt olu≈üturuldu');\n                  console.log('üìÑ PDF i√ßin Tailwind/Alpine prompt olu≈üturuldu');\n                } else {\n                  // Resim i√ßin otomatik prompt - TAILWIND versiyonu\n                  contentTopic = \"Bu g\\xF6rseldeki i\\xE7eri\\u011Fi Tailwind CSS ile profesyonel HTML'e d\\xF6n\\xFC\\u015Ft\\xFCr.\\n                G\\xF6rseldeki t\\xFCm elementleri (metin, tablo, grafik) Tailwind s\\u0131n\\u0131flar\\u0131yla olu\\u015Ftur.\\n                Alpine.js ile interaktivite ekle.\";\n                }\n              }\n\n              // Artƒ±k en az biri gerekli deƒüil - sadece bo≈ü kontrol√º kaldƒ±rdƒ±k\n              // PDF varsa otomatik prompt devreye girecek yukarƒ±da\n\n              this.setGeneratingState(true);\n\n              // Modal'ƒ± kilitle (overlay ekle) - Translation modal'ƒ±ndan alƒ±nmƒ±≈ü\n              this.addModalOverlay();\n              _context2.p = 4;\n              targetField = this.getTargetField();\n              console.log('üöÄ ƒ∞√ßerik √ºretimi ba≈ülatƒ±lƒ±yor...', {\n                contentTopic: contentTopic,\n                targetField: targetField,\n                hasFileAnalysis: hasFileAnalysis,\n                fileType: this.analysisResults.file_type\n              });\n\n              // Job ba≈ülat\n              _context2.n = 5;\n              return fetch(\"\".concat(this.config.baseUrl, \"/ai/generate-content-async\"), {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'X-CSRF-TOKEN': this.config.csrfToken,\n                  'Accept': 'application/json'\n                },\n                body: JSON.stringify({\n                  prompt: contentTopic,\n                  target_field: targetField,\n                  replace_existing: replaceExisting,\n                  module: this.config.module,\n                  component: this.config.targetComponent,\n                  // üÜï File analysis results - analysisResults'u direkt g√∂nder\n                  file_analysis: this.analysisResults && Object.keys(this.analysisResults).length > 0 ? this.analysisResults : null,\n                  conversion_type: this.getAnalysisType()\n                })\n              });\n            case 5:\n              response = _context2.v;\n              if (response.ok) {\n                _context2.n = 6;\n                break;\n              }\n              throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            case 6:\n              _context2.n = 7;\n              return response.json();\n            case 7:\n              result = _context2.v;\n              console.log('‚úÖ Job ba≈ülatƒ±ldƒ±:', result.job_id);\n              this.jobId = result.job_id;\n              this.startProgressTracking();\n              _context2.n = 9;\n              break;\n            case 8:\n              _context2.p = 8;\n              _t = _context2.v;\n              console.error('‚ùå Generation error:', _t);\n              this.showError('ƒ∞√ßerik √ºretimi ba≈ülatƒ±lamadƒ±: ' + _t.message);\n              this.removeModalOverlay();\n              this.setGeneratingState(false);\n            case 9:\n              return _context2.a(2);\n          }\n        }, _callee2, this, [[4, 8]]);\n      }));\n      function startGeneration() {\n        return _startGeneration.apply(this, arguments);\n      }\n      return startGeneration;\n    }()\n    /**\n     * Progress tracking ba≈ülat\n     */\n    )\n  }, {\n    key: \"startProgressTracking\",\n    value: function startProgressTracking() {\n      var _this2 = this;\n      console.log('üìä Progress tracking ba≈ülatƒ±lƒ±yor...');\n      var checkCount = 0;\n      var maxChecks = 120; // Maximum 2 dakika bekle (120 * 1sn)\n\n      this.progressInterval = setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {\n        var response, contentType, progress, tryFetchResult, ok, res3, p2, _t3, _t4;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.p = _context4.n) {\n            case 0:\n              checkCount++;\n\n              // Timeout kontrol√º\n              if (!(checkCount > maxChecks)) {\n                _context4.n = 1;\n                break;\n              }\n              console.error('‚è±Ô∏è Content generation timeout!');\n              clearInterval(_this2.progressInterval);\n              _this2.progressInterval = null; // Null'a set et\n              _this2.removeModalOverlay();\n              _this2.showError('ƒ∞√ßerik √ºretimi zaman a≈üƒ±mƒ±na uƒüradƒ±');\n              _this2.setGeneratingState(false);\n              return _context4.a(2);\n            case 1:\n              _context4.p = 1;\n              _context4.n = 2;\n              return fetch(\"\".concat(_this2.config.baseUrl, \"/ai/job-progress/\").concat(_this2.jobId), {\n                headers: {\n                  'Accept': 'application/json'\n                }\n              });\n            case 2:\n              response = _context4.v;\n              if (response.ok) {\n                _context4.n = 3;\n                break;\n              }\n              throw new Error(\"Progress check failed: \".concat(response.status));\n            case 3:\n              // Response'un JSON olup olmadƒ±ƒüƒ±nƒ± kontrol et\n              contentType = response.headers.get(\"content-type\");\n              if (!(!contentType || !contentType.includes(\"application/json\"))) {\n                _context4.n = 4;\n                break;\n              }\n              console.error('‚ùå Non-JSON response from progress check');\n              return _context4.a(2);\n            case 4:\n              _context4.n = 5;\n              return response.json();\n            case 5:\n              progress = _context4.v;\n              _this2.updateProgress(progress.progress, progress.message, progress.status);\n              if (!(progress.status === 'completed')) {\n                _context4.n = 15;\n                break;\n              }\n              // √ñNEMLI: √ñnce interval'ƒ± temizle - DUPLICATE TIMEOUT √ñNLEMƒ∞\n              if (_this2.progressInterval) {\n                clearInterval(_this2.progressInterval);\n                _this2.progressInterval = null;\n              }\n              console.log('üéâ ƒ∞√ßerik √ºretimi tamamlandƒ±!');\n\n              // Content'i al ve g√ºncelle\n              if (!progress.content) {\n                _context4.n = 6;\n                break;\n              }\n              _this2.onGenerationComplete(progress.content);\n              _context4.n = 14;\n              break;\n            case 6:\n              // Fallback: result endpoint'inden √ßek (√ßoklu deneme)\n              tryFetchResult = /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {\n                  var retries,\n                    delayMs,\n                    i,\n                    res2,\n                    _data2$data,\n                    data2,\n                    content2,\n                    _args3 = arguments,\n                    _t2;\n                  return _regenerator().w(function (_context3) {\n                    while (1) switch (_context3.p = _context3.n) {\n                      case 0:\n                        retries = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 6;\n                        delayMs = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 500;\n                        i = 0;\n                      case 1:\n                        if (!(i < retries)) {\n                          _context3.n = 9;\n                          break;\n                        }\n                        _context3.p = 2;\n                        _context3.n = 3;\n                        return fetch(\"/api/ai/admin/content/result/\".concat(_this2.jobId), {\n                          headers: {\n                            'Accept': 'application/json'\n                          }\n                        });\n                      case 3:\n                        res2 = _context3.v;\n                        if (!res2.ok) {\n                          _context3.n = 5;\n                          break;\n                        }\n                        _context3.n = 4;\n                        return res2.json();\n                      case 4:\n                        data2 = _context3.v;\n                        content2 = (data2 === null || data2 === void 0 || (_data2$data = data2.data) === null || _data2$data === void 0 ? void 0 : _data2$data.content) || (data2 === null || data2 === void 0 ? void 0 : data2.content);\n                        if (!content2) {\n                          _context3.n = 5;\n                          break;\n                        }\n                        _this2.onGenerationComplete(content2);\n                        return _context3.a(2, true);\n                      case 5:\n                        _context3.n = 7;\n                        break;\n                      case 6:\n                        _context3.p = 6;\n                        _t2 = _context3.v;\n                      case 7:\n                        _context3.n = 8;\n                        return new Promise(function (r) {\n                          return setTimeout(r, delayMs);\n                        });\n                      case 8:\n                        i++;\n                        _context3.n = 1;\n                        break;\n                      case 9:\n                        return _context3.a(2, false);\n                    }\n                  }, _callee3, null, [[2, 6]]);\n                }));\n                return function tryFetchResult() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n              _context4.n = 7;\n              return tryFetchResult(8, 400);\n            case 7:\n              ok = _context4.v;\n              if (ok) {\n                _context4.n = 14;\n                break;\n              }\n              _context4.p = 8;\n              _context4.n = 9;\n              return fetch(\"\".concat(_this2.config.baseUrl, \"/ai/job-progress/\").concat(_this2.jobId), {\n                headers: {\n                  'Accept': 'application/json'\n                }\n              });\n            case 9:\n              res3 = _context4.v;\n              if (!res3.ok) {\n                _context4.n = 11;\n                break;\n              }\n              _context4.n = 10;\n              return res3.json();\n            case 10:\n              p2 = _context4.v;\n              if (!(p2 !== null && p2 !== void 0 && p2.content)) {\n                _context4.n = 11;\n                break;\n              }\n              _this2.onGenerationComplete(p2.content);\n              return _context4.a(2);\n            case 11:\n              _context4.n = 13;\n              break;\n            case 12:\n              _context4.p = 12;\n              _t3 = _context4.v;\n            case 13:\n              console.warn('‚ö†Ô∏è ƒ∞√ßerik tamamlandƒ± g√∂r√ºn√ºyor ama i√ßerik alƒ±namadƒ±');\n              _this2.showError('ƒ∞√ßerik hazƒ±rlandƒ± ancak alƒ±namadƒ±. L√ºtfen tekrar deneyin.');\n              _this2.setGeneratingState(false);\n            case 14:\n              _context4.n = 16;\n              break;\n            case 15:\n              if (progress.status === 'failed') {\n                // √ñNEMLI: Fail durumunda da interval'ƒ± temizle\n                if (_this2.progressInterval) {\n                  clearInterval(_this2.progressInterval);\n                  _this2.progressInterval = null;\n                }\n                _this2.removeModalOverlay();\n                _this2.showError('ƒ∞√ßerik √ºretimi ba≈üarƒ±sƒ±z oldu');\n                _this2.setGeneratingState(false);\n              }\n            case 16:\n              _context4.n = 18;\n              break;\n            case 17:\n              _context4.p = 17;\n              _t4 = _context4.v;\n              console.error('‚ùå Progress check error:', _t4);\n              // √ñNEMLI: Hata durumunda da interval'ƒ± temizle\n              if (_this2.progressInterval) {\n                clearInterval(_this2.progressInterval);\n                _this2.progressInterval = null;\n              }\n              _this2.removeModalOverlay();\n              _this2.setGeneratingState(false);\n            case 18:\n              return _context4.a(2);\n          }\n        }, _callee4, null, [[8, 12], [1, 17]]);\n      })), 1000); // Her saniye kontrol et\n    }\n\n    /**\n     * Progress g√ºncelle\n     */\n  }, {\n    key: \"updateProgress\",\n    value: function updateProgress(percent, message) {\n      var status = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'processing';\n      console.log('üìä Progress:', percent + '% - ' + message);\n\n      // Overlay progress (PRIMARY) - Translation modal'ƒ±ndan alƒ±nmƒ±≈ü\n      var overlayProgressBar = document.getElementById('overlayProgressBar');\n      var overlayProgressMessage = document.getElementById('overlayProgressMessage');\n      var overlayProgressDetail = document.getElementById('overlayProgressDetail');\n      var overlaySpinner = document.getElementById('overlaySpinner');\n      if (overlayProgressBar) {\n        overlayProgressBar.style.width = percent + '%';\n        overlayProgressBar.setAttribute('aria-valuenow', percent);\n\n        // Progress bar renk deƒüi≈üimi\n        if (percent >= 100) {\n          overlayProgressBar.style.background = 'linear-gradient(90deg, #10b981 0%, #059669 50%, #047857 100%)';\n        } else if (percent >= 80) {\n          overlayProgressBar.style.background = 'linear-gradient(90deg, #f59e0b 0%, #d97706 50%, #b45309 100%)';\n        }\n      }\n      if (overlayProgressMessage) {\n        overlayProgressMessage.textContent = message;\n      }\n      if (overlayProgressDetail) {\n        overlayProgressDetail.textContent = \"\\u0130lerleme: \".concat(percent, \"% \\u2022 \").concat(new Date().toLocaleTimeString());\n      }\n\n      // Spinner kontrol√º\n      if (overlaySpinner) {\n        if (percent >= 100) {\n          overlaySpinner.style.display = 'none';\n        } else {\n          overlaySpinner.style.display = 'inline-block';\n        }\n      }\n\n      // Fallback - Modal body progress (compatibility)\n      var progressBar = document.getElementById('progressBar');\n      var progressMessage = document.getElementById('progressMessage');\n      if (progressBar) progressBar.style.width = percent + '%';\n      if (progressMessage) progressMessage.textContent = message;\n    }\n\n    /**\n     * Generation tamamlandƒ±ƒüƒ±nda\n     */\n  }, {\n    key: \"onGenerationComplete\",\n    value: function onGenerationComplete(content) {\n      var _this3 = this;\n      // √ñNEMLI: Progress interval'ƒ± kesinlikle durdur\n      if (this.progressInterval) {\n        clearInterval(this.progressInterval);\n        this.progressInterval = null;\n      }\n\n      // Final progress\n      this.updateProgress(100, 'ƒ∞√ßerik ba≈üarƒ±yla √ºretildi!', 'completed');\n\n      // Content'i hedefe g√∂nder - Global editor detection ile\n      var targetField = this.getTargetField();\n      var contentUpdated = this.updateGlobalEditor(content, targetField);\n      if (!contentUpdated) {\n        // Fallback: Component function'larƒ± dene\n        if (this.config.targetComponent && typeof this.config.targetComponent === 'function') {\n          this.config.targetComponent(content, targetField);\n        } else if (window.receiveGeneratedContent && typeof window.receiveGeneratedContent === 'function') {\n          window.receiveGeneratedContent(content, targetField);\n        } else {\n          console.warn('‚ö†Ô∏è Hedef editor bulunamadƒ±, content sadece console\\'da g√∂steriliyor:', content.substring(0, 100) + '...');\n        }\n      }\n\n      // Auto-close modal\n      setTimeout(function () {\n        // √ñNEMLI: Modal kapatmadan √∂nce de interval'ƒ± temizle\n        if (_this3.progressInterval) {\n          clearInterval(_this3.progressInterval);\n          _this3.progressInterval = null;\n        }\n        // Overlay'i kaldƒ±r\n        _this3.removeModalOverlay();\n        _this3.setGeneratingState(false); // State'i de resetle\n        _this3.closeModal();\n        _this3.showSuccess('‚úÖ ƒ∞√ßerik ba≈üarƒ±yla √ºretildi ve edit√∂re eklendi!');\n      }, 1500);\n    }\n\n    /**\n     * Global Editor Update Function - HugeRTE/TinyMCE destekli\n     */\n  }, {\n    key: \"updateGlobalEditor\",\n    value: function updateGlobalEditor(content) {\n      var targetField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'body';\n      try {\n        // üîç Daha g√º√ßl√º dil tespiti - aktif tab'dan al\n        var currentLang = 'tr'; // Default\n\n        // Method 1: Aktif language button'dan tespit\n        var activeLanguageBtn = document.querySelector('.language-switch-btn.text-primary');\n        if (activeLanguageBtn && activeLanguageBtn.textContent) {\n          var langText = activeLanguageBtn.textContent.trim();\n          if (langText && typeof langText === 'string') {\n            var langMatch = langText.toLowerCase();\n            if (langMatch) currentLang = langMatch;\n          }\n        }\n\n        // Method 2: Window variable'dan (lowercase normalize)\n        if (!currentLang || currentLang === 'tr') {\n          var windowLang = window.currentLanguage || window.selectedLanguage || 'tr';\n          currentLang = windowLang.toLowerCase();\n        }\n\n        // Method 3: URL'dan\n        if (!currentLang || currentLang === 'tr') {\n          var urlLang = window.location.pathname.match(/\\/([a-z]{2})\\//);\n          if (urlLang) currentLang = urlLang[1].toLowerCase();\n        }\n\n        // Son normalizasyon\n        currentLang = currentLang.toLowerCase();\n        console.log('üéØ updateGlobalEditor √ßaƒüƒ±rƒ±ldƒ±:', {\n          targetField: targetField,\n          currentLang: currentLang,\n          contentLength: content ? content.length : 0,\n          activeButton: activeLanguageBtn ? activeLanguageBtn.textContent : 'none'\n        });\n\n        // üîç DEBUG: DOM yapƒ±sƒ±nƒ± analiz et\n        console.log('üîç Global DOM DEBUG:', {\n          hugerte_exists: typeof hugerte !== 'undefined',\n          tinyMCE_exists: typeof tinyMCE !== 'undefined',\n          current_language: currentLang,\n          target_field: targetField\n        });\n\n        // HugeRTE/TinyMCE editor'larƒ± tara\n        if (typeof hugerte !== 'undefined') {\n          console.log('üîç Global HugeRTE Debug:', {\n            hugerte: hugerte,\n            hugerte_editors: hugerte.editors || 'editors property not found',\n            hugerte_activeEditor: hugerte.activeEditor || 'activeEditor not found',\n            hugerte_get_function: _typeof(hugerte.get),\n            hugerte_instances: hugerte.instances || 'instances property not found',\n            hugerte_all_keys: Object.keys(hugerte),\n            editor_ids: hugerte.editors ? hugerte.editors.map(function (ed) {\n              return ed.id;\n            }) : 'no editors'\n          });\n\n          // HugeRTE edit√∂r bulma (multiple approach)\n          var targetEditor = null;\n\n          // Method 1: hugerte.editors array - √ñNCELƒ∞K: Dil + alan kombinasyonu\n          if (hugerte.editors && Array.isArray(hugerte.editors)) {\n            // ƒ∞lk √∂nce tam e≈üle≈üme ara: hem dil hem alan\n            targetEditor = hugerte.editors.find(function (ed) {\n              return ed.id && ed.id.includes(targetField) && ed.id.includes(currentLang);\n            });\n\n            // Bulamazsa sadece dil ile ara\n            if (!targetEditor) {\n              targetEditor = hugerte.editors.find(function (ed) {\n                return ed.id && ed.id.includes(currentLang);\n              });\n            }\n\n            // Bulamazsa sadece alan ile ara\n            if (!targetEditor) {\n              targetEditor = hugerte.editors.find(function (ed) {\n                return ed.id && ed.id.includes(targetField);\n              });\n            }\n          }\n\n          // Method 2: DOM-based search EXACT PATTERN (en g√ºvenilir)\n          if (!targetEditor) {\n            console.log('üîç Method 2: DOM-based search ba≈ülƒ±yor...');\n\n            // EXACT PATTERN: editor_{fieldName}_{lang}_{uniqid}\n            var exactPattern = \"editor_\".concat(targetField, \"_\").concat(currentLang, \"_\");\n            var targetTextarea = document.querySelector(\"[id^=\\\"\".concat(exactPattern, \"\\\"]\"));\n\n            // Fallback pattern'lar\n            if (!targetTextarea) {\n              var fallbackPatterns = [\"[id*=\\\"editor_\".concat(targetField, \"_\").concat(currentLang, \"\\\"]\"), \"[id*=\\\"editor_body_\".concat(currentLang, \"\\\"]\"), \"[id*=\\\"editor_\".concat(targetField, \"\\\"]\"), \"[id*=\\\"\".concat(targetField, \"_\").concat(currentLang, \"\\\"]\"), \"textarea.hugerte-editor\"];\n              for (var _i = 0, _fallbackPatterns = fallbackPatterns; _i < _fallbackPatterns.length; _i++) {\n                var pattern = _fallbackPatterns[_i];\n                targetTextarea = document.querySelector(pattern);\n                if (targetTextarea) {\n                  console.log('‚úÖ Fallback pattern ba≈üarƒ±lƒ±:', pattern);\n                  break;\n                }\n              }\n            }\n            if (targetTextarea) {\n              console.log('‚úÖ Target textarea bulundu:', targetTextarea.id);\n\n              // HugeRTE editor'larƒ±nƒ± tara\n              var allEditors = hugerte.get ? hugerte.get() : [];\n              targetEditor = allEditors.find(function (ed) {\n                return ed.id === targetTextarea.id;\n              });\n              console.log('üîç Edit√∂r arama sonucu:', {\n                textarea_id: targetTextarea.id,\n                editor_found: targetEditor ? targetEditor.id : 'bulunamadƒ±',\n                all_editor_count: allEditors.length,\n                expected_pattern: exactPattern\n              });\n            } else {\n              console.log('‚ùå Hi√ßbir uygun textarea bulunamadƒ±');\n            }\n          }\n\n          // Method 3: hugerte.activeEditor (fallback)\n          if (!targetEditor && hugerte.activeEditor) {\n            console.log('üîç Method 3: activeEditor fallback kullanƒ±lƒ±yor');\n            targetEditor = hugerte.activeEditor;\n          }\n\n          // Method 4: hugerte.get() method\n          if (!targetEditor && typeof hugerte.get === 'function') {\n            var _allEditors = hugerte.get();\n            console.log('üîç hugerte.get() debug:', {\n              allEditors_count: _allEditors ? _allEditors.length : 0,\n              allEditors_ids: _allEditors ? _allEditors.map(function (ed) {\n                return ed.id;\n              }) : 'none',\n              searching_for: \"\".concat(targetField, \"_\").concat(currentLang)\n            });\n            if (_allEditors && _allEditors.length > 0) {\n              // ƒ∞lk √∂nce tam e≈üle≈üme ara\n              targetEditor = _allEditors.find(function (ed) {\n                return ed.id && ed.id.includes(targetField) && ed.id.includes(currentLang);\n              });\n              if (!targetEditor) {\n                // Sadece dil ile ara\n                targetEditor = _allEditors.find(function (ed) {\n                  return ed.id && ed.id.includes(currentLang);\n                });\n              }\n              if (!targetEditor) {\n                // Sadece alan ile ara\n                targetEditor = _allEditors.find(function (ed) {\n                  return ed.id && ed.id.includes(targetField);\n                });\n              }\n              console.log('üîç Method 3 sonucu:', {\n                found_editor: targetEditor ? targetEditor.id : 'none',\n                expected_pattern: \"editor_\".concat(targetField, \"_\").concat(currentLang)\n              });\n            }\n          }\n\n          // Method 4: hugerte.instances\n          if (!targetEditor && hugerte.instances) {\n            var instanceKeys = Object.keys(hugerte.instances);\n            var matchingKey = instanceKeys.find(function (key) {\n              return key.includes(targetField) && key.includes(currentLang);\n            }) || instanceKeys.find(function (key) {\n              return key.includes(currentLang);\n            }) || instanceKeys.find(function (key) {\n              return key.includes(targetField);\n            });\n            if (matchingKey) {\n              targetEditor = hugerte.instances[matchingKey];\n            }\n          }\n          if (targetEditor && targetEditor.setContent) {\n            console.log('‚úÖ Global HugeRTE editor bulundu:', targetEditor.id);\n\n            // HugeRTE i√ßeriƒüi g√ºncelle\n            targetEditor.setContent(content);\n\n            // HugeRTE FORCED REFRESH - Multiple Strategy\n            console.log('üîÑ HugeRTE zorla refresh ba≈ülatƒ±lƒ±yor...');\n\n            // Strategy 1: Event firing (ultra g√ºvenli)\n            if (targetEditor && targetEditor.fire && typeof targetEditor.fire === 'function') {\n              try {\n                // G√ºvenli event firing - her bir event'i ayrƒ± try-catch ile\n                ['change', 'input', 'keyup', 'SetContent', 'ExecCommand'].forEach(function (eventName) {\n                  try {\n                    targetEditor.fire(eventName);\n                  } catch (eventError) {\n                    // Silent ignore - individual event errors\n                  }\n                });\n              } catch (e) {\n                console.warn('‚ö†Ô∏è HugeRTE fire event hatasƒ± (g√ºvenli):', e.message);\n              }\n            }\n\n            // Strategy 2: Focus/blur cycle (g√ºvenli)\n            if (targetEditor && targetEditor.focus && targetEditor.blur) {\n              try {\n                targetEditor.focus();\n                setTimeout(function () {\n                  try {\n                    targetEditor.blur();\n                    setTimeout(function () {\n                      try {\n                        targetEditor.focus();\n                      } catch (e) {}\n                    }, 50);\n                  } catch (e) {}\n                }, 100);\n              } catch (e) {\n                // Silent ignore focus/blur errors\n              }\n            }\n\n            // Strategy 3: Force redraw through DOM manipulation\n            setTimeout(function () {\n              if (targetEditor.getContainer) {\n                var container = targetEditor.getContainer();\n                if (container) {\n                  container.style.display = 'none';\n                  container.offsetHeight; // Force reflow\n                  container.style.display = '';\n                }\n              }\n\n              // Strategy 4: Re-trigger editor refresh\n              if (targetEditor.refresh) {\n                targetEditor.refresh();\n              }\n\n              // Strategy 5: Update body element directly\n              if (targetEditor.getBody) {\n                var body = targetEditor.getBody();\n                if (body) {\n                  body.innerHTML = content;\n                }\n              }\n\n              // Strategy 6: Trigger content update event\n              if (targetEditor.nodeChanged) {\n                targetEditor.nodeChanged();\n              }\n\n              // Strategy 7: Trigger editor save/sync\n              if (targetEditor.save) {\n                targetEditor.save();\n              }\n\n              // Strategy 8: Update iframe content if HugeRTE uses iframe\n              if (targetEditor.getWin && targetEditor.getDoc) {\n                var doc = targetEditor.getDoc();\n                if (doc && doc.body) {\n                  doc.body.innerHTML = content;\n                }\n              }\n              console.log('‚úÖ HugeRTE forced refresh tamamlandƒ± (8 strateji)');\n            }, 50);\n\n            // Textarea'yƒ± da g√ºncelle (ENHANCED)\n            var textareaElement = document.getElementById(targetEditor.id);\n            if (textareaElement) {\n              textareaElement.value = content;\n\n              // Multiple event types for maximum compatibility\n              var events = ['input', 'change', 'keyup', 'keydown', 'paste'];\n              events.forEach(function (eventType) {\n                textareaElement.dispatchEvent(new Event(eventType, {\n                  bubbles: true,\n                  cancelable: true\n                }));\n              });\n\n              // Custom HugeRTE events if available\n              textareaElement.dispatchEvent(new CustomEvent('hugerte:update', {\n                detail: {\n                  content: content\n                },\n                bubbles: true\n              }));\n\n              // Force trigger change detection\n              if (textareaElement._vueComponent) {\n                textareaElement._vueComponent.$forceUpdate();\n              }\n            }\n\n            // Hidden input sync\n            var hiddenInput = document.getElementById(\"hidden_\".concat(targetField, \"_\").concat(currentLang));\n            if (hiddenInput) {\n              hiddenInput.value = content;\n              hiddenInput.dispatchEvent(new Event('input', {\n                bubbles: true\n              }));\n            }\n\n            // Livewire sync tetikle (eƒüer varsa)\n            setTimeout(function () {\n              if (window.Livewire) {\n                try {\n                  // Livewire v3 uyumlu g√ºncelleme\n                  var livewireComponent = document.querySelector('[wire\\\\:id]');\n                  if (livewireComponent) {\n                    // Modern Livewire syntax\n                    if (window.Livewire.dispatch) {\n                      window.Livewire.dispatch('refresh');\n                    } else if (window.Livewire.emit) {\n                      window.Livewire.emit('refresh');\n                    }\n                  }\n                } catch (e) {\n                  console.warn('‚ö†Ô∏è Livewire g√ºncelleme hatasƒ± (g√ºvenli):', e.message);\n                }\n              }\n            }, 200);\n            console.log('‚úÖ Global HugeRTE content g√ºncellendi ve forced refresh uygulandƒ±!');\n            return true;\n          }\n        }\n\n        // TinyMCE fallback\n        if (typeof tinyMCE !== 'undefined' && tinyMCE.editors) {\n          console.log('üîç Global TinyMCE Fallback:', Object.keys(tinyMCE.editors));\n          var editorKeys = Object.keys(tinyMCE.editors);\n          var _matchingKey = editorKeys.find(function (key) {\n            return key.includes(targetField) || key.includes(currentLang);\n          });\n          if (_matchingKey) {\n            var editor = tinyMCE.editors[_matchingKey];\n            if (editor && editor.setContent) {\n              editor.setContent(content);\n              console.log('‚úÖ Global TinyMCE content g√ºncellendi!');\n              return true;\n            }\n          }\n        }\n\n        // Son √ßare: Direkt textarea selector'larƒ± dene\n        console.log('üîç Global Manual textarea search ba≈ülatƒ±lƒ±yor...');\n\n        // Multiple textarea selector attempts\n        var textareaSelectors = [\"textarea[wire\\\\:model*=\\\"\".concat(targetField, \"\\\"]\"), \"textarea[wire\\\\:model*=\\\"\".concat(currentLang, \".\").concat(targetField, \"\\\"]\"), \"textarea[wire\\\\:model*=\\\"multiLangInputs.\".concat(currentLang, \".\").concat(targetField, \"\\\"]\"), \"textarea.hugerte-editor\", \"textarea[id*=\\\"\".concat(targetField, \"\\\"]\"), \"textarea[id*=\\\"\".concat(currentLang, \"\\\"]\"), \"textarea[name*=\\\"\".concat(targetField, \"\\\"]\"), \"textarea[placeholder*=\\\"\\u0130\\xE7erik\\\"]\", \"textarea[placeholder*=\\\"Content\\\"]\"];\n        var textarea = null;\n        for (var _i2 = 0, _textareaSelectors = textareaSelectors; _i2 < _textareaSelectors.length; _i2++) {\n          var selector = _textareaSelectors[_i2];\n          textarea = document.querySelector(selector);\n          if (textarea) {\n            console.log('‚úÖ Global Textarea bulundu:', selector);\n            break;\n          }\n        }\n        if (textarea) {\n          textarea.value = content;\n          textarea.dispatchEvent(new Event('input', {\n            bubbles: true\n          }));\n          textarea.dispatchEvent(new Event('change', {\n            bubbles: true\n          }));\n\n          // Hidden input'u da g√ºncelle\n          var _hiddenInput = document.getElementById(\"hidden_\".concat(targetField, \"_\").concat(currentLang));\n          if (_hiddenInput) {\n            _hiddenInput.value = content;\n            _hiddenInput.dispatchEvent(new Event('input', {\n              bubbles: true\n            }));\n          }\n          console.log('‚úÖ Global Textarea direkt g√ºncellendi');\n          return true;\n        }\n\n        // Ultra debug: T√ºm textarea'larƒ± listele\n        var allTextareas = document.querySelectorAll('textarea');\n        console.log('üîç Global Mevcut t√ºm textarea\\'lar:', Array.from(allTextareas).map(function (ta) {\n          return {\n            id: ta.id,\n            name: ta.name,\n            wireModel: ta.getAttribute('wire:model'),\n            classes: ta.className\n          };\n        }));\n        console.error('‚ùå Global hi√ßbir editor/textarea bulunamadƒ±');\n        return false;\n      } catch (e) {\n        console.error('‚ùå updateGlobalEditor error:', e);\n        return false;\n      }\n    }\n\n    /**\n     * Target field belirle\n     */\n  }, {\n    key: \"getTargetField\",\n    value: function getTargetField() {\n      return this.config.targetField || 'body';\n    }\n\n    /**\n     * Modal'ƒ± a√ß\n     */\n  }, {\n    key: \"showModal\",\n    value: function showModal() {\n      if (!this.modal) {\n        console.error('‚ùå Modal bulunamadƒ±');\n        return;\n      }\n\n      // √ñNEMLI: analysisResults'u temizleme! PDF analizi korunmalƒ±\n      console.log('üîç showModal called - current analysisResults:', this.analysisResults);\n      console.log('üì¶ Global PDF analysis:', window.aiPdfAnalysisResults);\n\n      // Modal'ƒ± a√ß - Tabler.io compatible\n      if (window.bootstrap && window.bootstrap.Modal) {\n        var modalInstance = new window.bootstrap.Modal(this.modal);\n        modalInstance.show();\n      } else if (window.jQuery && window.jQuery.fn.modal) {\n        // jQuery modal fallback\n        window.jQuery(this.modal).modal('show');\n      } else {\n        // Direct style show fallback\n        this.modal.style.display = 'block';\n        this.modal.classList.add('show');\n        document.body.classList.add('modal-open');\n\n        // Add backdrop\n        var backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop fade show';\n        backdrop.id = 'aiContentModalBackdrop';\n        document.body.appendChild(backdrop);\n      }\n    }\n\n    /**\n     * Modal'ƒ± kapat\n     */\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      if (!this.modal) return;\n\n      // Bootstrap modal kapat\n      if (window.bootstrap && window.bootstrap.Modal) {\n        var modalInstance = window.bootstrap.Modal.getInstance(this.modal);\n        if (modalInstance) {\n          modalInstance.hide();\n        }\n      } else if (window.jQuery && window.jQuery.fn.modal) {\n        window.jQuery(this.modal).modal('hide');\n      } else {\n        // Manual close\n        this.modal.style.display = 'none';\n        this.modal.classList.remove('show');\n        document.body.classList.remove('modal-open');\n\n        // Remove backdrop\n        var backdrop = document.getElementById('aiContentModalBackdrop');\n        if (backdrop) {\n          backdrop.remove();\n        }\n      }\n    }\n\n    /**\n     * Modal'ƒ± sƒ±fƒ±rla - Enhanced with file cleanup\n     */\n  }, {\n    key: \"resetModal\",\n    value: function resetModal() {\n      var _this4 = this;\n      // Form'u temizle\n      var contentTopic = document.getElementById('contentTopic');\n      if (contentTopic) contentTopic.value = '';\n\n      // Progress'i gizle\n      var progressArea = document.getElementById('contentProgress');\n      if (progressArea) progressArea.style.display = 'none';\n\n      // State'i sƒ±fƒ±rla\n      this.setGeneratingState(false);\n\n      // Interval'ƒ± temizle\n      if (this.progressInterval) {\n        clearInterval(this.progressInterval);\n        this.progressInterval = null;\n      }\n\n      // Overlay'i temizle\n      this.removeModalOverlay();\n\n      // üÜï File upload state'i temizle\n      this.uploadedFiles = [];\n\n      // √ñNEMLI: Yeni PDF y√ºkleme i√ßin state'leri temizle\n      this.analysisId = null;\n      this.analysisResults = {};\n      this.pendingAutoGenerate = false;\n\n      // Global storage'ƒ± da temizle\n      if (window.aiPdfAnalysisResults) {\n        window.aiPdfAnalysisResults = {};\n      }\n\n      // Alpine.js file uploader'ƒ± da reset et\n      var fileUploaderElements = document.querySelectorAll('[x-data*=\"fileUploader\"]');\n      fileUploaderElements.forEach(function (el) {\n        if (el._x_dataStack) {\n          var data = el._x_dataStack[0];\n          if (data.files) data.files = [];\n          if (data.uploading) data.uploading = false;\n          if (data.uploadProgress) data.uploadProgress = 0;\n          if (data.hasFiles) data.hasFiles = false;\n        }\n      });\n      this.jobId = null;\n\n      // ULTRA BACKDROP CLEANUP - Force remove all backdrop remains\n      setTimeout(function () {\n        _this4.forceCleanBackdrop();\n      }, 200);\n      console.log('üßπ Modal reset completed - file state cleared');\n    }\n\n    /**\n     * Zorla backdrop temizleme\n     */\n  }, {\n    key: \"forceCleanBackdrop\",\n    value: function forceCleanBackdrop() {\n      console.log('üßπ FORCE: Backdrop ultra temizleme ba≈ülƒ±yor...');\n\n      // T√ºm backdrop elementlerini bul ve sil\n      var allBackdrops = document.querySelectorAll('.modal-backdrop, ' + '[class*=\"backdrop\"], ' + '[id*=\"backdrop\"], ' + 'div[style*=\"background-color: rgba\"], ' + 'div[style*=\"position: fixed\"][style*=\"z-index\"]');\n      allBackdrops.forEach(function (backdrop, index) {\n        console.log(\"\\uD83D\\uDDD1\\uFE0F FORCE: Backdrop \".concat(index + 1, \" siliniyor:\"), backdrop.className || backdrop.id);\n        backdrop.remove();\n      });\n\n      // Body durumunu zorla reset et\n      document.body.classList.remove('modal-open');\n      document.body.style.overflow = '';\n      document.body.style.paddingRight = '';\n      document.body.style.marginRight = '';\n\n      // Click eventi bloklarƒ±nƒ± kaldƒ±r\n      document.body.style.pointerEvents = '';\n      console.log('‚úÖ FORCE: Backdrop ultra temizleme tamamlandƒ±');\n    }\n\n    /**\n     * Generating state'i ayarla\n     */\n  }, {\n    key: \"setGeneratingState\",\n    value: function setGeneratingState(isGenerating) {\n      this.isGenerating = isGenerating;\n\n      // Button state\n      var startButton = document.getElementById('startGeneration');\n      var buttonText = document.getElementById('buttonText');\n      var buttonSpinner = document.getElementById('buttonSpinner');\n      var cancelButton = document.getElementById('cancelButton');\n      if (startButton) {\n        if (isGenerating) {\n          // DUPLICATE √ñNLEME: Butonu tamamen disable et\n          startButton.disabled = true;\n          startButton.style.pointerEvents = 'none';\n          startButton.classList.add('opacity-50', 'cursor-not-allowed', 'disabled');\n          if (buttonText) buttonText.textContent = '√úretiliyor...';\n          if (buttonSpinner) buttonSpinner.style.display = 'inline-block';\n          if (cancelButton) cancelButton.disabled = true;\n\n          // Progress area g√∂ster\n          var progressArea = document.getElementById('contentProgress');\n          var progressDetails = document.getElementById('progressDetails');\n          if (progressArea) progressArea.style.display = 'block';\n          if (progressDetails) progressDetails.style.display = 'block';\n        } else {\n          // Butonu tekrar enable et\n          startButton.disabled = false;\n          startButton.style.pointerEvents = 'auto';\n          startButton.classList.remove('opacity-50', 'cursor-not-allowed', 'disabled');\n          if (buttonText) buttonText.textContent = 'üöÄ ƒ∞√ßerik √úret';\n          if (buttonSpinner) buttonSpinner.style.display = 'none';\n          if (cancelButton) cancelButton.disabled = false;\n\n          // Progress area gizle\n          var _progressArea = document.getElementById('contentProgress');\n          var _progressDetails = document.getElementById('progressDetails');\n          if (_progressArea) _progressArea.style.display = 'none';\n          if (_progressDetails) _progressDetails.style.display = 'none';\n        }\n      }\n    }\n\n    /**\n     * Success message g√∂ster\n     */\n  }, {\n    key: \"showSuccess\",\n    value: function showSuccess(message) {\n      // Tabler toast ya da basit alert\n      if (window.bootstrap && window.bootstrap.Toast) {\n        // Bootstrap toast implementation\n        console.log('‚úÖ Success:', message);\n      } else {\n        console.log('‚úÖ Success:', message);\n      }\n    }\n\n    /**\n     * Error message g√∂ster\n     */\n  }, {\n    key: \"showError\",\n    value: function showError(message) {\n      // Tabler toast ya da basit alert\n      if (window.bootstrap && window.bootstrap.Toast) {\n        // Bootstrap toast implementation\n        console.error('‚ùå Error:', message);\n      } else {\n        alert(message);\n      }\n    }\n\n    /**\n     * Inline warning g√∂ster - modal i√ßinde\n     */\n  }, {\n    key: \"showInlineWarning\",\n    value: function showInlineWarning(message) {\n      // Modal body i√ßinde uyarƒ± alanƒ±nƒ± bul veya olu≈ütur\n      var warningArea = document.getElementById('inlineWarningArea');\n      if (!warningArea) {\n        // Uyarƒ± alanƒ± yoksa olu≈ütur\n        var modalBody = document.querySelector('#aiContentModal .modal-body');\n        if (modalBody) {\n          warningArea = document.createElement('div');\n          warningArea.id = 'inlineWarningArea';\n          warningArea.className = 'mb-3';\n          // Modal body'nin en ba≈üƒ±na ekle\n          modalBody.insertBefore(warningArea, modalBody.firstChild);\n        }\n      }\n      if (warningArea) {\n        warningArea.innerHTML = \"\\n                <div class=\\\"alert alert-danger alert-dismissible fade show\\\" role=\\\"alert\\\" style=\\\"background-color: #dc3545; border-color: #dc3545; color: white;\\\">\\n                    <i class=\\\"fas fa-exclamation-triangle me-2\\\"></i>\\n                    \".concat(message, \"\\n                    <button type=\\\"button\\\" class=\\\"btn-close btn-close-white\\\" data-bs-dismiss=\\\"alert\\\" aria-label=\\\"Close\\\"></button>\\n                </div>\\n            \");\n\n        // 5 saniye sonra otomatik gizle\n        setTimeout(function () {\n          var alertElement = warningArea.querySelector('.alert');\n          if (alertElement) {\n            alertElement.classList.remove('show');\n            setTimeout(function () {\n              warningArea.innerHTML = '';\n            }, 300);\n          }\n        }, 5000);\n      }\n      console.warn('‚ö†Ô∏è Inline Warning:', message);\n    }\n\n    /**\n     * Modal overlay ekleme fonksiyonu - Translation modal'ƒ±ndan alƒ±nmƒ±≈ü AI Sihirbazƒ± Temalƒ±\n     */\n  }, {\n    key: \"addModalOverlay\",\n    value: function addModalOverlay() {\n      if (!this.modal) return;\n\n      // Var olan overlay'i temizle\n      this.removeModalOverlay();\n\n      // Modal content'i bul\n      var modalContent = this.modal.querySelector('.modal-content');\n      if (modalContent) {\n        // Overlay div'i olu≈ütur - AI Wizard Theme\n        var overlay = document.createElement('div');\n        overlay.id = 'aiContentOverlay';\n        overlay.style.cssText = \"\\n                position: absolute;\\n                top: 0;\\n                left: 0;\\n                width: 100%;\\n                height: 100%;\\n                background: linear-gradient(135deg,\\n                    rgba(99, 102, 241, 0.95) 0%,\\n                    rgba(139, 92, 246, 0.95) 25%,\\n                    rgba(168, 85, 247, 0.95) 50%,\\n                    rgba(219, 39, 119, 0.95) 75%,\\n                    rgba(236, 72, 153, 0.95) 100%);\\n                background-size: 400% 400%;\\n                animation: gradientShift 3s ease infinite;\\n                z-index: 1060;\\n                display: flex;\\n                flex-direction: column;\\n                align-items: center;\\n                justify-content: center;\\n                border-radius: 0.375rem;\\n                backdrop-filter: blur(10px);\\n            \";\n\n        // AI Wizard Loading Content\n        overlay.innerHTML = \"\\n                <style>\\n                    @keyframes gradientShift {\\n                        0% { background-position: 0% 50%; }\\n                        50% { background-position: 100% 50%; }\\n                        100% { background-position: 0% 50%; }\\n                    }\\n                    @keyframes magicPulse {\\n                        0%, 100% { transform: scale(1); opacity: 0.8; }\\n                        50% { transform: scale(1.1); opacity: 1; }\\n                    }\\n                    @keyframes sparkle {\\n                        0%, 100% { opacity: 0; transform: scale(0.5); }\\n                        50% { opacity: 1; transform: scale(1); }\\n                    }\\n                    .magic-wand {\\n                        animation: magicPulse 2s ease-in-out infinite;\\n                        font-size: 3rem;\\n                        margin-bottom: 1rem;\\n                        filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));\\n                    }\\n                    .sparkles {\\n                        position: absolute;\\n                        color: white;\\n                        animation: sparkle 1.5s ease-in-out infinite;\\n                    }\\n                    .sparkle-1 { top: 20%; left: 20%; animation-delay: 0s; }\\n                    .sparkle-2 { top: 30%; right: 20%; animation-delay: 0.3s; }\\n                    .sparkle-3 { bottom: 30%; left: 25%; animation-delay: 0.6s; }\\n                    .sparkle-4 { bottom: 20%; right: 25%; animation-delay: 0.9s; }\\n                    .ai-title {\\n                        color: white;\\n                        font-size: 1.5rem;\\n                        font-weight: bold;\\n                        margin-bottom: 0.5rem;\\n                        text-shadow: 0 0 20px rgba(255, 255, 255, 0.5);\\n                    }\\n                    .ai-subtitle {\\n                        color: rgba(255, 255, 255, 0.9);\\n                        font-size: 1rem;\\n                        margin-bottom: 1.5rem;\\n                        text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);\\n                    }\\n                </style>\\n\\n                <div class=\\\"sparkles sparkle-1\\\">\\u2728</div>\\n                <div class=\\\"sparkles sparkle-2\\\">\\u2B50</div>\\n                <div class=\\\"sparkles sparkle-3\\\">\\uD83C\\uDF1F</div>\\n                <div class=\\\"sparkles sparkle-4\\\">\\uD83D\\uDCAB</div>\\n\\n                <div class=\\\"magic-wand\\\">\\uD83E\\uDD16</div>\\n                <div class=\\\"ai-title\\\">Yapay Zeka \\u0130\\xE7erik \\xDCreticisi</div>\\n                <div class=\\\"ai-subtitle\\\">\\u0130\\xE7erik \\xFCretim hizmeti sizin i\\xE7in ba\\u015Flat\\u0131ld\\u0131</div>\\n\\n                <div class=\\\"col-12 mt-3\\\" id=\\\"overlayContentProgress\\\">\\n                    <div class=\\\"d-flex align-items-center justify-content-center mb-3\\\">\\n                        <div class=\\\"spinner-border spinner-border-sm text-white me-2\\\" id=\\\"overlaySpinner\\\" role=\\\"status\\\">\\n                            <span class=\\\"visually-hidden\\\">Loading...</span>\\n                        </div>\\n                        <span id=\\\"overlayProgressMessage\\\" class=\\\"text-white fw-bold\\\">\\uD83D\\uDE80 Yapay zeka sistemi devreye giriyor...</span>\\n                    </div>\\n                    <div class=\\\"progress\\\" style=\\\"height: 8px; border-radius: 4px; background: rgba(255,255,255,0.25); box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);\\\">\\n                        <div class=\\\"progress-bar\\\" id=\\\"overlayProgressBar\\\" role=\\\"progressbar\\\"\\n                             style=\\\"width: 15%; background: linear-gradient(90deg, #fff 0%, rgba(255,255,255,0.9) 50%, #fff 100%); border-radius: 4px; transition: width 0.5s ease; box-shadow: 0 1px 3px rgba(255,255,255,0.3);\\\"\\n                             aria-valuenow=\\\"15\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\"></div>\\n                    </div>\\n                    <div class=\\\"text-center mt-2\\\">\\n                        <small id=\\\"overlayProgressDetail\\\" class=\\\"text-white-50\\\">Ger\\xE7ek zamanl\\u0131 progress tracking aktif</small>\\n                    </div>\\n                </div>\\n            \";\n\n        // Modal content'e relative position ver\n        modalContent.style.position = 'relative';\n\n        // Overlay'i ekle\n        modalContent.appendChild(overlay);\n        console.log('üîí AI Content overlay added');\n      }\n    }\n\n    /**\n     * Modal overlay kaldƒ±rma fonksiyonu\n     */\n  }, {\n    key: \"removeModalOverlay\",\n    value: function removeModalOverlay() {\n      var overlay = document.getElementById('aiContentOverlay');\n      if (overlay) {\n        overlay.remove();\n        console.log('üîì AI Content overlay removed');\n      }\n    }\n\n    /**\n     * Livewire DOM error handling setup\n     */\n  }, {\n    key: \"setupLivewireErrorHandling\",\n    value: function setupLivewireErrorHandling() {\n      // Global error handler for Livewire morphing issues\n      window.addEventListener('error', function (event) {\n        if (event.message && event.message.includes('before')) {\n          console.warn('üîß Livewire DOM error suppressed:', event.message);\n          event.preventDefault();\n          return false;\n        }\n      });\n\n      // Catch unhandled promise rejections\n      window.addEventListener('unhandledrejection', function (event) {\n        if (event.reason && event.reason.toString().includes('before')) {\n          console.warn('üîß Livewire DOM promise rejection suppressed:', event.reason);\n          event.preventDefault();\n          return false;\n        }\n      });\n    }\n  }]);\n}(); // Auto-initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('üöÄ AI Content Generation System DOM hazƒ±r');\n\n  // Global instance olu≈ütur\n  if (document.getElementById('aiContentModal')) {\n    window.aiContentSystem = new AIContentGenerationSystem();\n    console.log('‚úÖ Global AI Content System instance olu≈üturuldu');\n  }\n});\nconsole.log('üì¶ AI Content Generation System y√ºklendi');\n\n// üÜï FILE UPLOAD METHODS - ASYNC VERSION\nAIContentGenerationSystem.prototype.handleFileUpload = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(files) {\n    var formData, i, response, result, _t5;\n    return _regenerator().w(function (_context5) {\n      while (1) switch (_context5.p = _context5.n) {\n        case 0:\n          _context5.p = 0;\n          console.log('üìÑ File upload ba≈üladƒ± (ASYNC):', files.length, 'dosya');\n          formData = new FormData();\n          for (i = 0; i < files.length; i++) {\n            formData.append('files[]', files[i]);\n          }\n          formData.append('analysis_type', this.getAnalysisType());\n          formData.append('_token', this.config.csrfToken);\n\n          // Step 1: Dosyayƒ± y√ºkle ve analiz ba≈ülat (async - bloklanmaz!)\n          _context5.n = 1;\n          return fetch(\"\".concat(this.config.baseUrl, \"/ai/analyze-files\"), {\n            method: 'POST',\n            body: formData\n          });\n        case 1:\n          response = _context5.v;\n          if (response.ok) {\n            _context5.n = 2;\n            break;\n          }\n          throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n        case 2:\n          _context5.n = 3;\n          return response.json();\n        case 3:\n          result = _context5.v;\n          console.log('üìÑ File analysis JOB ba≈ülatƒ±ldƒ±:', result);\n          if (result.success) {\n            _context5.n = 4;\n            break;\n          }\n          throw new Error(result.error || 'Analiz ba≈ülatƒ±lamadƒ±');\n        case 4:\n          // Step 2: Analysis ID'yi sakla\n          this.analysisId = result.analysis_id;\n\n          // Step 3: Progress tracking ba≈ülat\n          this.trackAnalysisProgress(result.analysis_id);\n\n          // UI'ƒ± g√ºncelle - analiz devam ediyor\n          this.showAnalysisInProgress();\n          return _context5.a(2, result);\n        case 5:\n          _context5.p = 5;\n          _t5 = _context5.v;\n          console.error('‚ùå File upload error:', _t5);\n          this.showError('Dosya analizi ba≈üarƒ±sƒ±z: ' + _t5.message);\n          throw _t5;\n        case 6:\n          return _context5.a(2);\n      }\n    }, _callee5, this, [[0, 5]]);\n  }));\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n// Analiz progress tracking\nAIContentGenerationSystem.prototype.trackAnalysisProgress = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(analysisId) {\n    var _this5 = this;\n    var _checkProgress;\n    return _regenerator().w(function (_context7) {\n      while (1) switch (_context7.n) {\n        case 0:\n          console.log('üîÑ Analysis progress tracking ba≈üladƒ±:', analysisId);\n          _checkProgress = /*#__PURE__*/function () {\n            var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {\n              var response, contentType, status, _t6;\n              return _regenerator().w(function (_context6) {\n                while (1) switch (_context6.p = _context6.n) {\n                  case 0:\n                    _context6.p = 0;\n                    _context6.n = 1;\n                    return fetch(\"\".concat(_this5.config.baseUrl, \"/ai/analyze-files/status/\").concat(analysisId));\n                  case 1:\n                    response = _context6.v;\n                    // Response'un JSON olup olmadƒ±ƒüƒ±nƒ± kontrol et\n                    contentType = response.headers.get(\"content-type\");\n                    if (!(!contentType || !contentType.includes(\"application/json\"))) {\n                      _context6.n = 2;\n                      break;\n                    }\n                    console.error('‚ùå Non-JSON response received from server');\n                    // Tekrar dene\n                    setTimeout(_checkProgress, 2000);\n                    return _context6.a(2);\n                  case 2:\n                    _context6.n = 3;\n                    return response.json();\n                  case 3:\n                    status = _context6.v;\n                    console.log('üìä Analysis status:', status);\n\n                    // Progress bar g√ºncelle\n                    _this5.updateAnalysisProgress(status);\n                    if (status.status === 'completed') {\n                      // Analiz tamamlandƒ±!\n                      console.log('‚úÖ File analysis TAMAMLANDI!');\n                      _this5.analysisResults = status.result;\n                      // GLOBAL STORAGE'A DA KAYDET\n                      window.aiPdfAnalysisResults = status.result;\n                      console.log('üì¶ Analysis results saved globally:', window.aiPdfAnalysisResults);\n                      _this5.updateModalWithAnalysis(status.result);\n                    } else if (status.status === 'failed') {\n                      // Hata olu≈ütu\n                      console.error('‚ùå Analysis failed:', status.error);\n                      _this5.showError('Dosya analizi ba≈üarƒ±sƒ±z: ' + (status.error || 'Bilinmeyen hata'));\n                    } else {\n                      // Devam ediyor, 2 saniye sonra tekrar kontrol\n                      setTimeout(_checkProgress, 2000);\n                    }\n                    _context6.n = 5;\n                    break;\n                  case 4:\n                    _context6.p = 4;\n                    _t6 = _context6.v;\n                    console.error('‚ùå Progress check error:', _t6);\n                    _this5.showError('Analiz durumu kontrol edilemedi');\n                  case 5:\n                    return _context6.a(2);\n                }\n              }, _callee6, null, [[0, 4]]);\n            }));\n            return function checkProgress() {\n              return _ref5.apply(this, arguments);\n            };\n          }(); // ƒ∞lk kontrol√º 1 saniye sonra ba≈ülat\n          setTimeout(_checkProgress, 1000);\n        case 1:\n          return _context7.a(2);\n      }\n    }, _callee7);\n  }));\n  return function (_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\n// Progress UI g√ºncelleme\nAIContentGenerationSystem.prototype.updateAnalysisProgress = function (status) {\n  var fileInfo = document.querySelector('.file-upload-info');\n  if (fileInfo) {\n    fileInfo.innerHTML = \"\\n            <div class=\\\"alert alert-info\\\">\\n                <div class=\\\"d-flex align-items-center\\\">\\n                    <div class=\\\"spinner-border spinner-border-sm me-2\\\" role=\\\"status\\\"></div>\\n                    <div>\\n                        <strong>\".concat(status.message || 'Dosya analiz ediliyor...', \"</strong>\\n                        <div class=\\\"progress mt-2\\\" style=\\\"height: 5px;\\\">\\n                            <div class=\\\"progress-bar\\\" role=\\\"progressbar\\\"\\n                                style=\\\"width: \").concat(status.progress || 0, \"%\\\"></div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        \");\n  }\n};\n\n// Analiz devam ediyor UI\nAIContentGenerationSystem.prototype.showAnalysisInProgress = function () {\n  var fileInfo = document.querySelector('.file-upload-info');\n  if (fileInfo) {\n    fileInfo.innerHTML = \"\\n            <div class=\\\"alert alert-info\\\">\\n                <div class=\\\"d-flex align-items-center\\\">\\n                    <div class=\\\"spinner-border spinner-border-sm me-2\\\" role=\\\"status\\\"></div>\\n                    <strong>Dosya y\\xFCklendi, analiz ediliyor...</strong>\\n                </div>\\n            </div>\\n        \";\n  }\n};\n\n// Analysis type getter\nAIContentGenerationSystem.prototype.getAnalysisType = function () {\n  var layoutPreserve = document.getElementById('layoutPreserve');\n  return layoutPreserve && layoutPreserve.checked ? 'layout_preserve' : 'content_extract';\n};\n\n// Modal'ƒ± analiz sonu√ßlarƒ±yla g√ºncelle\nAIContentGenerationSystem.prototype.updateModalWithAnalysis = function (result) {\n  var _this6 = this;\n  // KRƒ∞Tƒ∞K: analysisResults'u her zaman g√ºncelle (overwrite protection kaldƒ±rƒ±ldƒ±)\n  this.analysisResults = result;\n\n  // Deep copy ile g√ºvenlik saƒüla\n  this.analysisResults = JSON.parse(JSON.stringify(result));\n  console.log('‚úÖ PDF analizi tamamlandƒ± ve G√úVENLE saklandƒ±', {\n    analysisResults: this.analysisResults,\n    analysisResultsKeys: Object.keys(this.analysisResults),\n    file_type: result.file_type,\n    hasContent: result.content ? 'YES' : 'NO',\n    timestamp: new Date().toISOString()\n  });\n\n  // Kullanƒ±cƒ±ya PDF y√ºklendiƒüini g√∂ster\n  var fileInfo = document.querySelector('.file-upload-info');\n  if (fileInfo) {\n    fileInfo.innerHTML = \"<div class=\\\"alert alert-success\\\">\\n            <i class=\\\"ti ti-file-check\\\"></i>\\n            \".concat(result.file_type.toUpperCase(), \" dosyas\\u0131 analiz edildi - haz\\u0131r!\\n            <br><small>\\u0130\\xE7erik konusu girmezseniz, PDF otomatik olarak HTML'e d\\xF6n\\xFC\\u015Ft\\xFCr\\xFClecek.</small>\\n        </div>\");\n  }\n\n  // ƒ∞√ßerik konusu alanƒ±nƒ± temizle ve placeholder g√ºncelle\n  var contentTopicInput = document.getElementById('contentTopic');\n  if (contentTopicInput) {\n    contentTopicInput.placeholder = 'Bo≈ü bƒ±rakƒ±rsanƒ±z PDF otomatik d√∂n√º≈üt√ºr√ºl√ºr';\n  }\n\n  // üí∞ PDF kredi uyarƒ±sƒ±nƒ± ekle\n  this.showPdfCreditWarning();\n\n  // Eƒüer kullanƒ±cƒ± analizi beklerken √ºretim ba≈ülattƒ±ysa, ≈üimdi otomatik ba≈ülat\n  if (this.pendingAutoGenerate) {\n    console.log('üöÄ PDF analizi bitti, bekleyen i√ßerik √ºretimi otomatik ba≈ülƒ±yor...');\n    this.pendingAutoGenerate = false;\n\n    // √ñNEMLI: State'i reset et ki startGeneration √ßalƒ±≈üabilsin\n    this.isGenerating = false;\n\n    // Kƒ±sa bir nefes verip ba≈ülat\n    setTimeout(function () {\n      _this6.startGeneration();\n    }, 300);\n  }\n};\n\n/**\n * PDF kullanƒ±mƒ± i√ßin kredi uyarƒ±sƒ± g√∂ster\n */\nAIContentGenerationSystem.prototype.showPdfCreditWarning = function () {\n  var modalFooter = document.querySelector('#aiContentModal .modal-footer');\n  if (modalFooter) {\n    // √ñnceki uyarƒ±yƒ± kaldƒ±r\n    var existingWarning = modalFooter.querySelector('.pdf-credit-warning');\n    if (existingWarning) {\n      existingWarning.remove();\n    }\n\n    // Kƒ±sa not ekle\n    var warningDiv = document.createElement('div');\n    warningDiv.className = 'pdf-credit-warning text-muted small mb-2';\n    warningDiv.innerHTML = \"<i class=\\\"ti ti-info-circle\\\"></i> PDF y\\xFCklemek daha fazla kredi t\\xFCketir.\";\n\n    // Modal footer'ƒ±n ba≈üƒ±na ekle\n    modalFooter.insertBefore(warningDiv, modalFooter.firstChild);\n  }\n};\n\n// Removed duplicate setupLivewireErrorHandling prototype - now part of class\n\n/**\n * Global AI Content Modal a√ßma fonksiyonu\n * Page component'lerinden √ßaƒürƒ±labilir\n */\n/**\n * Alpine.js File Uploader Component\n */\nwindow.fileUploader = function () {\n  return {\n    files: [],\n    uploading: false,\n    uploadProgress: 0,\n    get hasFiles() {\n      return this.files.length > 0;\n    },\n    handleDrop: function handleDrop(event) {\n      var files = Array.from(event.dataTransfer.files);\n      this.handleFiles(files);\n    },\n    handleFiles: function handleFiles(files) {\n      console.log('üìÅ Files selected:', files.length);\n      this.files = Array.from(files).filter(function (file) {\n        var validTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n        var isValid = validTypes.includes(file.type);\n        if (!isValid) {\n          console.warn('‚ö†Ô∏è Invalid file type:', file.type);\n          // Kullanƒ±cƒ±ya hata g√∂ster\n          var fileInfo = document.querySelector('.file-upload-info');\n          if (fileInfo) {\n            fileInfo.innerHTML = \"\\n                            <div class=\\\"alert alert-danger\\\">\\n                                <i class=\\\"ti ti-x\\\"></i>\\n                                Desteklenmeyen dosya t\\xFCr\\xFC: \".concat(file.name, \".\\n                                Sadece PDF, JPG, PNG ve WebP dosyalar\\u0131 kabul edilir.\\n                            </div>\");\n          }\n        }\n        return isValid;\n      });\n      console.log('‚úÖ Valid files:', this.files.length);\n      if (this.files.length > 0) {\n        // Dosya y√ºkleme bilgisini hemen g√∂ster\n        this.showUploadingInfo();\n        this.uploadFiles();\n      } else if (files.length > 0) {\n        // Hi√ß ge√ßerli dosya yoksa ama dosya se√ßilmi≈üse hata g√∂ster\n        var fileInfo = document.querySelector('.file-upload-info');\n        if (fileInfo) {\n          fileInfo.innerHTML = \"\\n                        <div class=\\\"alert alert-danger\\\">\\n                            <i class=\\\"ti ti-x\\\"></i>\\n                            L\\xFCtfen ge\\xE7erli bir dosya t\\xFCr\\xFC se\\xE7in (PDF, JPG, PNG, WebP).\\n                        </div>\";\n        }\n      }\n    },\n    showUploadingInfo: function showUploadingInfo() {\n      var fileInfo = document.querySelector('.file-upload-info');\n      if (fileInfo) {\n        fileInfo.innerHTML = \"\\n                    <div class=\\\"alert alert-info\\\">\\n                        <div class=\\\"d-flex align-items-center\\\">\\n                            <div class=\\\"spinner-border spinner-border-sm me-2\\\" role=\\\"status\\\"></div>\\n                            <strong>Dosya y\\xFCkleniyor...</strong>\\n                        </div>\\n                    </div>\";\n      }\n    },\n    uploadFiles: function uploadFiles() {\n      var _this7 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {\n        var progressInterval, result, _t7;\n        return _regenerator().w(function (_context8) {\n          while (1) switch (_context8.p = _context8.n) {\n            case 0:\n              _this7.uploading = true;\n              _this7.uploadProgress = 0;\n              _context8.p = 1;\n              // Upload progress simulation\n              progressInterval = setInterval(function () {\n                if (_this7.uploadProgress < 90) {\n                  _this7.uploadProgress += 10;\n                }\n              }, 200);\n              console.log('üöÄ Starting file upload to AI system...');\n\n              // Actual upload\n              _context8.n = 2;\n              return window.aiContentSystem.handleFileUpload(_this7.files);\n            case 2:\n              result = _context8.v;\n              clearInterval(progressInterval);\n              _this7.uploadProgress = 100;\n              setTimeout(function () {\n                _this7.uploading = false;\n              }, 500);\n              console.log('‚úÖ File upload completed');\n              _context8.n = 4;\n              break;\n            case 3:\n              _context8.p = 3;\n              _t7 = _context8.v;\n              _this7.uploading = false;\n              _this7.uploadProgress = 0;\n              console.error('‚ùå Upload failed:', _t7);\n            case 4:\n              return _context8.a(2);\n          }\n        }, _callee8, null, [[1, 3]]);\n      }))();\n    },\n    removeFile: function removeFile(fileToRemove) {\n      console.log('üóëÔ∏è Removing file:', fileToRemove.name);\n      this.files = this.files.filter(function (file) {\n        return file !== fileToRemove;\n      });\n      if (this.files.length === 0) {\n        // KRƒ∞Tƒ∞K Fƒ∞X: analysisResults'u g√ºvenli ≈üekilde temizle\n        if (window.aiContentSystem) {\n          console.log('üßπ T√ºm dosyalar silindi, analysis results temizleniyor');\n          window.aiContentSystem.analysisResults = {};\n          // GLOBAL STORAGE'I DA TEMƒ∞ZLE\n          window.aiPdfAnalysisResults = {};\n        }\n\n        // Clear content topic if it was auto-generated\n        var contentTopic = document.getElementById('contentTopic');\n        if (contentTopic && contentTopic.value.includes('[DOSYADAN √áIKARILAN ƒ∞√áERƒ∞K]')) {\n          contentTopic.value = '';\n        }\n\n        // File info alanƒ±nƒ± da temizle\n        var fileInfo = document.querySelector('.file-upload-info');\n        if (fileInfo) {\n          fileInfo.innerHTML = '';\n        }\n      }\n    },\n    getFileIcon: function getFileIcon(type) {\n      if (type === 'application/pdf') return 'üìÑ';\n      if (type.startsWith('image/')) return 'üñºÔ∏è';\n      return 'üìé';\n    },\n    formatFileSize: function formatFileSize(bytes) {\n      if (bytes === 0) return '0 Bytes';\n      var k = 1024;\n      var sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      var i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n  };\n};\n\n/**\n * Global AI Content Modal a√ßma fonksiyonu\n * Page component'lerinden √ßaƒürƒ±labilir\n */\nwindow.openAIContentModal = function () {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  console.log('üöÄ openAIContentModal √ßaƒüƒ±rƒ±ldƒ±:', config);\n  if (window.aiContentSystem) {\n    window.aiContentSystem.configure(config);\n    window.aiContentSystem.showModal();\n  } else {\n    console.error('‚ùå AI Content System hen√ºz y√ºklenmemi≈ü');\n  }\n};\n\n/**\n * Close content modal helper\n */\nwindow.closeContentModal = function () {\n  if (window.aiContentSystem) {\n    window.aiContentSystem.closeModal();\n  }\n};\n\n/**\n * üéØ GLOBAL CONTENT RECEIVER - T√ºm mod√ºllerde √ßalƒ±≈üƒ±r\n * AI'dan √ºretilen i√ßeriƒüi herhangi bir edit√∂re yerle≈ütirir\n */\nwindow.receiveGeneratedContent = function (content) {\n  var targetConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  console.log('üìù receiveGeneratedContent √ßaƒüƒ±rƒ±ldƒ±:', {\n    content: content.substring(0, 100) + '...',\n    targetConfig: targetConfig\n  });\n  try {\n    // Editor ID'si varsa doƒürudan ona yaz\n    if (targetConfig.editorId) {\n      var editorElement = document.getElementById(targetConfig.editorId);\n      if (editorElement) {\n        // HugeRTE editor mi kontrol et\n        if (window.hugerte && window.hugerte.get) {\n          var editor = window.hugerte.get(targetConfig.editorId);\n          if (editor) {\n            editor.setContent(content);\n            console.log('‚úÖ HugeRTE editor i√ßeriƒüi g√ºncellendi:', targetConfig.editorId);\n            return;\n          }\n        }\n\n        // TinyMCE editor mi kontrol et\n        if (window.tinymce && window.tinymce.get) {\n          var _editor = window.tinymce.get(targetConfig.editorId);\n          if (_editor) {\n            _editor.setContent(content);\n            console.log('‚úÖ TinyMCE editor i√ßeriƒüi g√ºncellendi:', targetConfig.editorId);\n            return;\n          }\n        }\n\n        // Normal textarea\n        editorElement.value = content;\n\n        // Livewire sync i√ßin event trigger et\n        var event = new Event('input', {\n          bubbles: true\n        });\n        editorElement.dispatchEvent(event);\n        console.log('‚úÖ Textarea i√ßeriƒüi g√ºncellendi:', targetConfig.editorId);\n        return;\n      }\n    }\n\n    // Generic editor detection fallback\n    var possibleSelectors = ['textarea.hugerte-editor', 'textarea[data-hugerte]', '.hugerte-content', 'textarea.tinymce', 'textarea[id*=\"content\"]', 'textarea[id*=\"body\"]', 'textarea[id*=\"description\"]'];\n    for (var _i3 = 0, _possibleSelectors = possibleSelectors; _i3 < _possibleSelectors.length; _i3++) {\n      var selector = _possibleSelectors[_i3];\n      var elements = document.querySelectorAll(selector);\n      if (elements.length > 0) {\n        var element = elements[0]; // ƒ∞lkini al\n\n        // Editor ID'si varsa √∂zel i≈ülem\n        if (element.id) {\n          // HugeRTE\n          if (window.hugerte && window.hugerte.get) {\n            var _editor2 = window.hugerte.get(element.id);\n            if (_editor2) {\n              _editor2.setContent(content);\n              console.log('‚úÖ HugeRTE fallback editor g√ºncellendi:', element.id);\n              return;\n            }\n          }\n\n          // TinyMCE\n          if (window.tinymce && window.tinymce.get) {\n            var _editor3 = window.tinymce.get(element.id);\n            if (_editor3) {\n              _editor3.setContent(content);\n              console.log('‚úÖ TinyMCE fallback editor g√ºncellendi:', element.id);\n              return;\n            }\n          }\n        }\n\n        // Normal textarea fallback\n        element.value = content;\n        var _event = new Event('input', {\n          bubbles: true\n        });\n        element.dispatchEvent(_event);\n        console.log('‚úÖ Fallback textarea g√ºncellendi:', selector);\n        return;\n      }\n    }\n    console.warn('‚ö†Ô∏è Hi√ßbir uygun editor bulunamadƒ±, i√ßerik console\\'da g√∂steriliyor');\n    console.log('Generated Content:', content);\n  } catch (error) {\n    console.error('‚ùå receiveGeneratedContent hatasƒ±:', error);\n    console.log('Generated Content (error fallback):', content);\n  }\n};\n\n/**\n * üõ°Ô∏è HUGERTE EDITOR STATE PRESERVATION METHODS\n * HugeRTE edit√∂r√ºn modal i≈ülemleri sƒ±rasƒ±nda state'ini korur\n */\n\n// HugeRTE edit√∂r state'ini koruma i√ßin kullanƒ±lan objeler\nAIContentGenerationSystem.prototype.editorStateBackup = {};\nAIContentGenerationSystem.prototype.editorFocusBackup = null;\n\n/**\n * Modal a√ßƒ±lmadan √∂nce edit√∂r durumunu kaydet\n */\nAIContentGenerationSystem.prototype.preserveEditorState = function () {\n  var _this8 = this;\n  console.log('üõ°Ô∏è HugeRTE edit√∂r durumu korunuyor...');\n  try {\n    if (typeof hugerte !== 'undefined') {\n      // Aktif edit√∂r√º kaydet\n      if (hugerte.activeEditor) {\n        this.editorFocusBackup = hugerte.activeEditor.id;\n        console.log('üìù Aktif edit√∂r kaydedildi:', this.editorFocusBackup);\n      }\n\n      // T√ºm edit√∂r instance'larƒ±nƒ±n durumunu kaydet\n      Object.keys(hugerte.editors || {}).forEach(function (editorId) {\n        var editor = hugerte.editors[editorId];\n        if (editor) {\n          var _editor$mode;\n          _this8.editorStateBackup[editorId] = {\n            mode: ((_editor$mode = editor.mode) === null || _editor$mode === void 0 ? void 0 : _editor$mode.get()) || 'design',\n            content: editor.getContent(),\n            isHidden: editor.isHidden(),\n            isDirty: editor.isDirty()\n          };\n\n          // Edit√∂r√º design mode'da zorla tut\n          if (editor.mode && editor.mode.set) {\n            editor.mode.set('design');\n          }\n          console.log(\"\\uD83D\\uDCBE Edit\\xF6r durumu kaydedildi: \".concat(editorId), _this8.editorStateBackup[editorId]);\n        }\n      });\n    }\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Edit√∂r durumu kaydetme hatasƒ±:', error);\n  }\n};\n\n/**\n * Modal a√ßƒ±ldƒ±ktan sonra edit√∂r kararlƒ±lƒ±ƒüƒ±nƒ± saƒüla\n */\nAIContentGenerationSystem.prototype.ensureEditorStability = function () {\n  console.log('üîí HugeRTE edit√∂r kararlƒ±lƒ±ƒüƒ± kontrol ediliyor...');\n  try {\n    if (typeof hugerte !== 'undefined') {\n      // T√ºm edit√∂rlerin design mode'da olduƒüundan emin ol\n      Object.keys(hugerte.editors || {}).forEach(function (editorId) {\n        var editor = hugerte.editors[editorId];\n        if (editor && editor.mode) {\n          // Eƒüer HTML mode'daysa, design mode'a ge√ß\n          if (editor.mode.get() === 'code') {\n            editor.mode.set('design');\n            console.log(\"\\uD83D\\uDD27 Edit\\xF6r design mode'a ge\\xE7irildi: \".concat(editorId));\n          }\n        }\n      });\n    }\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Edit√∂r kararlƒ±lƒ±k kontrol√º hatasƒ±:', error);\n  }\n};\n\n/**\n * Modal kapanmadan √∂nce edit√∂r√º hazƒ±rla\n */\nAIContentGenerationSystem.prototype.prepareEditorForModalClose = function () {\n  console.log('üéØ HugeRTE edit√∂r modal kapanƒ±≈ü i√ßin hazƒ±rlanƒ±yor...');\n  try {\n    if (typeof hugerte !== 'undefined') {\n      // Focus'u k√∂reltmek i√ßin aktif edit√∂rden focus'u kaldƒ±r\n      if (hugerte.activeEditor) {\n        hugerte.activeEditor.contentAreaContainer.blur();\n        hugerte.activeEditor.contentWindow.blur();\n      }\n\n      // T√ºm edit√∂rlerden event listener'larƒ± ge√ßici olarak kaldƒ±r\n      Object.keys(hugerte.editors || {}).forEach(function (editorId) {\n        var editor = hugerte.editors[editorId];\n        if (editor) {\n          // Design mode'da kalmayƒ± garantile\n          if (editor.mode && editor.mode.set) {\n            editor.mode.set('design');\n          }\n        }\n      });\n    }\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Edit√∂r kapanƒ±≈ü hazƒ±rlƒ±ƒüƒ± hatasƒ±:', error);\n  }\n};\n\n/**\n * Modal kapandƒ±ktan sonra edit√∂r durumunu restore et\n */\nAIContentGenerationSystem.prototype.restoreEditorState = function () {\n  var _this9 = this;\n  console.log('üîÑ HugeRTE edit√∂r durumu restore ediliyor...');\n  try {\n    if (typeof hugerte !== 'undefined') {\n      // Kƒ±sa bir delay ile edit√∂r durumunu restore et\n      setTimeout(function () {\n        // Kaydedilen edit√∂r durumlarƒ±nƒ± restore et\n        Object.keys(_this9.editorStateBackup).forEach(function (editorId) {\n          var editor = hugerte.editors[editorId];\n          var backup = _this9.editorStateBackup[editorId];\n          if (editor && backup) {\n            // Mode'u restore et (ancak design mode'da kalsƒ±n)\n            if (editor.mode && backup.mode === 'design') {\n              editor.mode.set('design');\n            }\n            console.log(\"\\uD83D\\uDD04 Edit\\xF6r durumu restore edildi: \".concat(editorId));\n          }\n        });\n\n        // Aktif edit√∂r√º restore et\n        if (_this9.editorFocusBackup && hugerte.get(_this9.editorFocusBackup)) {\n          var editor = hugerte.get(_this9.editorFocusBackup);\n          if (editor) {\n            editor.focus();\n            console.log('üéØ Aktif edit√∂r focus restore edildi:', _this9.editorFocusBackup);\n          }\n        }\n\n        // Backup'larƒ± temizle\n        _this9.editorStateBackup = {};\n        _this9.editorFocusBackup = null;\n      }, 150); // 150ms delay - modal animasyonunun tamamlanmasƒ± i√ßin\n    }\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Edit√∂r durumu restore hatasƒ±:', error);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/assets/js/ai-content-system.js\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/assets/js/ai-content-system.js"]();
/******/ 	
/******/ })()
;