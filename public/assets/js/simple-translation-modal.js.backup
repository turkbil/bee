console.log('üîß Simple Translation Modal loading...');

// Translation modal a√ßma fonksiyonu
function openTranslationModal(entityType, entityId) {
    console.log('üîß Opening translation modal for:', entityType, entityId);
    
    const modal = document.getElementById('aiTranslationModal');
    if (modal) {
        modal.setAttribute('data-entity-type', entityType);
        modal.setAttribute('data-entity-id', entityId);
        manualModalOpen(modal);
        setTimeout(() => loadAvailableLanguages(), 100);
    } else {
        console.error('‚ùå Translation modal not found!');
    }
}

// Manuel modal a√ßma - A1 style (MODAL KORUMA)
function manualModalOpen(modal) {
    console.log('üì¶ A1-STYLE: Opening modal with DOM protection...');
    
    // MODAL KORUMA - CSS stillerini koru, ta≈üƒ±ma
    
    // Eski backdrop'larƒ± temizle
    document.querySelectorAll('.modal-backdrop').forEach(b => b.remove());
    
    // Backdrop ekle
    const backdrop = document.createElement('div');
    backdrop.className = 'modal-backdrop fade show';
    backdrop.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1040;';
    document.body.appendChild(backdrop);
    
    // Modal'ƒ± a√ß
    modal.style.display = 'block';
    modal.style.zIndex = '1050';
    modal.classList.add('show');
    modal.setAttribute('aria-hidden', 'false');
    modal.setAttribute('aria-modal', 'true');
    
    // Body'yi kilitle
    document.body.classList.add('modal-open');
    document.body.style.overflow = 'hidden';
    
    console.log('‚úÖ Modal opened');
}

// Dil y√ºkleme fonksiyonu
function loadAvailableLanguages() {
    console.log('üåç Loading languages...');
    
    const headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
    };
    
    const csrfToken = document.querySelector('meta[name="csrf-token"]');
    const csrfValue = csrfToken ? csrfToken.getAttribute('content') : null;
    if (csrfValue) headers['X-CSRF-TOKEN'] = csrfValue;
    
    fetch('/admin/api/tenant-languages', { method: 'GET', headers, credentials: 'same-origin' })
        .then(response => response.json())
        .then(data => {
            if (data.success && data.languages) {
                populateLanguageSelectors(data.languages);
            } else {
                const fallback = [
                    { code: 'tr', name: 'T√ºrk√ße', flag: 'üáπüá∑' },
                    { code: 'en', name: 'English', flag: 'üá¨üáß' }
                ];
                populateLanguageSelectors(fallback);
            }
        })
        .catch(() => {
            const fallback = [
                { code: 'tr', name: 'T√ºrk√ße', flag: 'üáπüá∑' },
                { code: 'en', name: 'English', flag: 'üá¨üáß' }
            ];
            populateLanguageSelectors(fallback);
        });
}

// Dil selector'larƒ±nƒ± doldur - Modern Design
function populateLanguageSelectors(languages) {
    console.log('üìù Modern: Populating selectors with:', languages);

    // Kaynak dil - Enhanced
    const sourceSelect = document.getElementById('sourceLanguage');
    if (sourceSelect) {
        sourceSelect.innerHTML = '<option value="">üåç Kaynak dili se√ßin...</option>';
        languages.forEach(lang => {
            sourceSelect.innerHTML += `<option value="${lang.code}">${lang.flag} ${lang.name}</option>`;
        });
        sourceSelect.value = 'tr';
        sourceSelect.addEventListener('change', handleSourceLanguageChange);
    }

    // Hedef diller - Modern Card Design
    const targetContainer = document.getElementById('targetLanguagesContainer');
    if (targetContainer) {
        targetContainer.innerHTML = '';
        languages.forEach(lang => {
            const div = document.createElement('div');
            div.className = 'col-md-6 col-lg-4';
            div.setAttribute('data-lang-code', lang.code);
            
            // A1 SINIFI Pretty Checkbox Design
            div.innerHTML = `
                <div class="pretty-lang-card" style="margin-bottom: 15px;">
                    <div class="pretty p-default p-round p-bigger p-smooth">
                        <input type="checkbox" 
                               class="target-lang-checkbox" 
                               name="targetLanguages[]" 
                               value="${lang.code}" 
                               id="target_${lang.code}"
                               data-max-selection="2">
                        <div class="state p-primary-o">
                            <label class="pretty-label" for="target_${lang.code}">
                                <div class="lang-content d-flex align-items-center p-3" style="
                                    border: 2px solid #e9ecef; 
                                    border-radius: 12px; 
                                    transition: all 0.3s ease; 
                                    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
                                    cursor: pointer;
                                    min-height: 70px;
                                ">
                                    <div class="lang-flag me-3" style="font-size: 2rem; min-width: 40px; text-align: center;">${lang.flag}</div>
                                    <div class="lang-info flex-grow-1">
                                        <div class="fw-bold text-dark mb-1" style="font-size: 16px;">${lang.name}</div>
                                        <div class="small text-muted text-uppercase" style="font-size: 11px; letter-spacing: 0.5px;">${lang.code}</div>
                                    </div>
                                    <div class="check-indicator" style="
                                        width: 24px; 
                                        height: 24px; 
                                        border: 2px solid #dee2e6; 
                                        border-radius: 50%; 
                                        display: flex; 
                                        align-items: center; 
                                        justify-content: center;
                                        transition: all 0.3s ease;
                                    ">
                                        <i class="fas fa-check" style="font-size: 12px; color: transparent; transition: color 0.3s ease;"></i>
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div>
                </div>
            `;
            targetContainer.appendChild(div);
            
            // A1 SINIFI Pretty Checkbox handlers
            const checkbox = div.querySelector('.target-lang-checkbox');
            const langContent = div.querySelector('.lang-content');
            const checkIndicator = div.querySelector('.check-indicator');
            
            // Initial state
            updatePrettyCardStyle(langContent, checkbox, checkIndicator);
            
            // Checkbox change handler with 2 dil sƒ±nƒ±rlamasƒ±
            checkbox.addEventListener('change', () => {
                const checkedCount = document.querySelectorAll('.target-lang-checkbox:checked:not(:disabled)').length;
                
                // 2 dil sƒ±nƒ±rlamasƒ± kontrol√º
                if (checkbox.checked && checkedCount > 2) {
                    checkbox.checked = false;
                    showMaxSelectionWarning();
                    return;
                }
                
                updatePrettyCardStyle(langContent, checkbox, checkIndicator);
                updateStartButtonState();
                updateSelectionCounter();
            });
            
            // Label click handler (pretty checkbox i√ßin)
            const label = div.querySelector('.pretty-label');
            if (label) {
                label.addEventListener('click', (e) => {
                    e.preventDefault(); // Default checkbox behavior √∂nle
                    
                    if (!checkbox.disabled) {
                        const checkedCount = document.querySelectorAll('.target-lang-checkbox:checked:not(:disabled)').length;
                        
                        // 2 dil sƒ±nƒ±rlamasƒ± kontrol√º
                        if (!checkbox.checked && checkedCount >= 2) {
                            showMaxSelectionWarning();
                            return;
                        }
                        
                        checkbox.checked = !checkbox.checked;
                        checkbox.dispatchEvent(new Event('change'));
                    }
                });
            }
        });
    }

    handleSourceLanguageChange();
    updateStartButtonState();

    const startBtn = document.getElementById('startTranslation');
    if (startBtn) {
        startBtn.onclick = startTranslation;
    }
    
    console.log('‚úÖ Modern languages loaded with enhanced cards');
}

// A1 SINIFI Pretty Card Style Update Function
function updatePrettyCardStyle(langContent, checkbox, checkIndicator) {
    if (!langContent || !checkbox || !checkIndicator) return;
    
    if (checkbox.checked && !checkbox.disabled) {
        // ‚úÖ SELECTED STATE - A1 Premium Design
        langContent.style.background = 'linear-gradient(135deg, #e8f5e8 0%, #f0f9ff 100%)';
        langContent.style.borderColor = '#22c55e';
        langContent.style.boxShadow = '0 6px 20px rgba(34, 197, 94, 0.25)';
        langContent.style.transform = 'translateY(-3px) scale(1.02)';
        
        // Check indicator - Premium checked style
        checkIndicator.style.background = '#22c55e';
        checkIndicator.style.borderColor = '#22c55e';
        checkIndicator.style.transform = 'scale(1.1)';
        const checkIcon = checkIndicator.querySelector('i');
        if (checkIcon) {
            checkIcon.style.color = '#ffffff';
            checkIcon.style.transform = 'scale(1.2)';
        }
        
    } else if (checkbox.disabled) {
        // ‚ùå DISABLED STATE - Subtle grayed out
        langContent.style.background = 'linear-gradient(135deg, #f5f5f5 0%, #e5e7eb 100%)';
        langContent.style.borderColor = '#d1d5db';
        langContent.style.boxShadow = 'none';
        langContent.style.transform = 'none';
        langContent.style.opacity = '0.5';
        langContent.style.cursor = 'not-allowed';
        
        // Check indicator - Disabled style
        checkIndicator.style.background = '#f3f4f6';
        checkIndicator.style.borderColor = '#d1d5db';
        checkIndicator.style.transform = 'none';
        const checkIcon = checkIndicator.querySelector('i');
        if (checkIcon) {
            checkIcon.style.color = 'transparent';
            checkIcon.style.transform = 'none';
        }
        
    } else {
        // ‚ö™ DEFAULT STATE - Clean and hoverable
        langContent.style.background = 'linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%)';
        langContent.style.borderColor = '#e9ecef';
        langContent.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.06)';
        langContent.style.transform = 'none';
        langContent.style.opacity = '1';
        langContent.style.cursor = 'pointer';
        
        // Check indicator - Default style
        checkIndicator.style.background = '#ffffff';
        checkIndicator.style.borderColor = '#dee2e6';
        checkIndicator.style.transform = 'none';
        const checkIcon = checkIndicator.querySelector('i');
        if (checkIcon) {
            checkIcon.style.color = 'transparent';
            checkIcon.style.transform = 'none';
        }
    }
    
    // Hover effect (A1 Premium)
    langContent.onmouseenter = function() {
        if (!checkbox.disabled && !checkbox.checked) {
            this.style.borderColor = '#a855f7';
            this.style.boxShadow = '0 4px 12px rgba(168, 85, 247, 0.15)';
            this.style.transform = 'translateY(-1px)';
        }
    };
    
    langContent.onmouseleave = function() {
        if (!checkbox.disabled && !checkbox.checked) {
            updatePrettyCardStyle(langContent, checkbox, checkIndicator);
        }
    };
}

// 2 Dƒ∞L SINIRLAMASI UYARI MESAJI
function showMaxSelectionWarning() {
    // Existing toast varsa kullan
    if (window.showToast) {
        window.showToast('‚ö†Ô∏è Performans i√ßin aynƒ± anda en fazla 2 dil se√ßebilirsiniz!', 'warning', 4000);
        return;
    }
    
    // Custom toast olu≈ütur
    const toast = document.createElement('div');
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, #f59e0b 0%, #f97316 100%);
        color: white;
        padding: 16px 24px;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(245, 158, 11, 0.3);
        z-index: 99999;
        font-weight: 600;
        font-size: 14px;
        max-width: 350px;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
    `;
    
    toast.innerHTML = `
        <div class="d-flex align-items-center">
            <div class="me-2" style="font-size: 20px;">‚ö†Ô∏è</div>
            <div>
                <div class="fw-bold mb-1">Se√ßim Sƒ±nƒ±rƒ±</div>
                <div style="font-size: 12px; opacity: 0.9;">Sistem performansƒ± i√ßin aynƒ± anda en fazla 2 dil √ßevrilebilir</div>
            </div>
        </div>
    `;
    
    document.body.appendChild(toast);
    
    // Animasyonlu g√∂sterim
    setTimeout(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateX(0)';
    }, 100);
    
    // Otomatik kapanma
    setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(100%)';
        setTimeout(() => toast.remove(), 300);
    }, 4000);
    
    console.log('‚ö†Ô∏è A1-STYLE: 2 dil sƒ±nƒ±rlamasƒ± uyarƒ±sƒ± g√∂sterildi');
}

// SE√áƒ∞M SAYACI G√úNCELLE
function updateSelectionCounter() {
    const checkedCount = document.querySelectorAll('.target-lang-checkbox:checked:not(:disabled)').length;
    
    // Hedef diller label'ƒ±na saya√ß ekle
    const targetLabel = document.querySelector('label[for="targetLanguagesContainer"]') || 
                       document.querySelector('.modal-body label:nth-of-type(2)');
    
    if (targetLabel) {
        // Mevcut sayacƒ± kaldƒ±r
        const existingCounter = targetLabel.querySelector('.selection-counter');
        if (existingCounter) existingCounter.remove();
        
        // Yeni saya√ß ekle
        if (checkedCount > 0) {
            const counter = document.createElement('span');
            counter.className = 'selection-counter badge ms-2';
            counter.style.cssText = `
                background: ${checkedCount === 2 ? '#f59e0b' : '#22c55e'};
                color: white;
                font-size: 11px;
                padding: 4px 8px;
                border-radius: 12px;
                font-weight: 600;
            `;
            counter.textContent = `${checkedCount}/2 se√ßili`;
            targetLabel.appendChild(counter);
        }
    }
    
    console.log(`üìä A1-STYLE: ${checkedCount}/2 dil se√ßili`);
}

// Kaynak dil deƒüi≈üikliƒüi - A1 SINIFI Pretty Checkbox System
function handleSourceLanguageChange() {
    const sourceSelect = document.getElementById('sourceLanguage');
    const selectedSourceLang = sourceSelect ? sourceSelect.value : '';
    
    const targetContainer = document.getElementById('targetLanguagesContainer');
    if (!targetContainer) return;
    
    const containers = targetContainer.querySelectorAll('[data-lang-code]');
    containers.forEach(container => {
        const langCode = container.getAttribute('data-lang-code');
        const checkbox = container.querySelector('.target-lang-checkbox');
        const langContent = container.querySelector('.lang-content');
        const checkIndicator = container.querySelector('.check-indicator');
        
        if (langCode === selectedSourceLang && selectedSourceLang !== '') {
            // ‚ùå KAYNAK Dƒ∞L - Disable source language (A1 style)
            if (checkbox) {
                checkbox.disabled = true;
                checkbox.checked = false;
            }
            console.log(`üö´ A1-STYLE: ${langCode} kaynak dil olarak devre dƒ±≈üƒ± bƒ±rakƒ±ldƒ±`);
        } else {
            // ‚úÖ HEDEF Dƒ∞LLER - Enable other languages (A1 style)
            if (checkbox) {
                checkbox.disabled = false;
                // Akƒ±llƒ± se√ßim: T√ºrk√ße'den √ßevirirken diƒüerlerini se√ß, ama max 2 tane
                if (selectedSourceLang === 'tr' && langCode !== 'tr') {
                    const currentChecked = document.querySelectorAll('.target-lang-checkbox:checked:not(:disabled)').length;
                    if (currentChecked < 2) {
                        checkbox.checked = true;
                    }
                }
            }
            console.log(`‚úÖ A1-STYLE: ${langCode} hedef dil olarak aktif edildi`);
        }
        
        // A1 SINIFI Pretty Card Style Update
        updatePrettyCardStyle(langContent, checkbox, checkIndicator);
    });
    
    updateStartButtonState();
    updateSelectionCounter(); // Selection sayacƒ±nƒ± g√ºncelle
    console.log(`üéØ A1-STYLE: Kaynak dil deƒüi≈üti: ${selectedSourceLang}`);

// Start button durumu
function updateStartButtonState() {
    const sourceSelect = document.getElementById('sourceLanguage');
    const sourceLanguage = sourceSelect ? sourceSelect.value : '';
    
    const checkedTargets = document.querySelectorAll('.target-lang-checkbox:checked:not(:disabled)');
    const hasTargets = checkedTargets.length > 0;
    
    const startBtn = document.getElementById('startTranslation');
    if (startBtn) {
        startBtn.disabled = !sourceLanguage || !hasTargets;
        
        if (sourceLanguage && hasTargets) {
            startBtn.classList.remove('btn-secondary');
            startBtn.classList.add('btn-primary');
        } else {
            startBtn.classList.remove('btn-primary');
            startBtn.classList.add('btn-secondary');
        }
    }
}

// √áeviri ba≈ülatma - A1 style (MODAL A√áIK KALIR)
function startTranslation() {
    console.log('üöÄ A1-STYLE: Starting translation - MODAL WILL STAY OPEN...');
    
    const modal = document.getElementById('aiTranslationModal');
    if (!modal) return;

    const startBtn = document.getElementById('startTranslation');
    if (startBtn && startBtn.disabled) {
        console.log('‚ö†Ô∏è Button disabled, ignoring click');
        return;
    }
    
    // Butonu kilitle
    if (startBtn) {
        startBtn.disabled = true;
        startBtn.style.pointerEvents = 'none';
        startBtn.innerHTML = '<span>ƒ∞≈ülem Ba≈ülatƒ±ldƒ±...</span> <span class="spinner-border spinner-border-sm ms-1"></span>';
    }

    // MODAL KORUMA - A1 STƒ∞Lƒ∞
    modal.setAttribute('data-bs-keyboard', 'false');
    modal.setAttribute('data-bs-backdrop', 'static');
    
    const entityType = modal.getAttribute('data-entity-type');
    const entityId = parseInt(modal.getAttribute('data-entity-id'));
    
    // Dilleri al
    const sourceSelect = document.getElementById('sourceLanguage');
    const sourceLanguage = sourceSelect ? sourceSelect.value : 'tr';
    
    const targetLanguages = [];
    document.querySelectorAll('input[name="targetLanguages[]"]:checked').forEach(cb => {
        targetLanguages.push(cb.value);
    });
    
    if (targetLanguages.length === 0) {
        alert('L√ºtfen en az bir hedef dil se√ßin!');
        resetTranslationButton();
        return;
    }
    
    // A1 STƒ∞Lƒ∞: Overlay g√∂ster ve MODAL A√áIK BIRAK
    showAIOverlay();
    
    // Backend job ba≈ülat
    startQueueTranslationA1Style(entityType, entityId, sourceLanguage, targetLanguages);
}

// AI Overlay - A1 style (modal-content √ºzerine absolute)
function showAIOverlay() {
    console.log('üé® A1-STYLE: Showing AI overlay - MODAL STAYS OPEN...');
    
    // Mevcut overlay'i kaldƒ±r
    const existing = document.getElementById('aiOverlay');
    if (existing) existing.remove();
    
    // Modal content bul
    const modal = document.getElementById('aiTranslationModal');
    const modalContent = modal ? modal.querySelector('.modal-content') : null;
    
    if (!modalContent) {
        console.error('‚ùå Modal content not found');
        return;
    }
    
    // Modal content'e relative position ver
    modalContent.style.position = 'relative';
    
    // Overlay olu≈ütur
    const overlay = document.createElement('div');
    overlay.id = 'aiOverlay';
    
    // A1 style CSS with !important for conflict resolution
    overlay.style.cssText = `
        position: absolute !important;
        top: 0 !important;
        left: 0 !important;
        width: 100% !important;
        height: 100% !important;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 20%, #f093fb 40%, #f5576c 60%, #4facfe 80%, #00d4ff 100%) !important;
        background-size: 600% 600% !important;
        animation: gradientSlide 8s ease-in-out infinite !important;
        z-index: 99999 !important;
        display: flex !important;
        flex-direction: column !important;
        justify-content: center !important;
        align-items: center !important;
        opacity: 0 !important;
        transition: opacity 0.5s ease-in-out !important;
        border-radius: 0.25rem !important;
        color: white !important;
        text-align: center !important;
    `;
    
    // A1 style animasyon
    if (!document.getElementById('aiStyles')) {
        const style = document.createElement('style');
        style.id = 'aiStyles';
        style.textContent = `
            @keyframes gradientSlide {
                0% { background-position: 0% 50%; }
                25% { background-position: 100% 25%; }
                50% { background-position: 200% 75%; }
                75% { background-position: 300% 25%; }
                100% { background-position: 400% 50%; }
            }
            @keyframes aiFloat {
                0%, 100% { transform: translateY(0px); }
                50% { transform: translateY(-10px); }
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;
        document.head.appendChild(style);
    }
    
    // A1 style content
    overlay.innerHTML = `
        <div style="font-size: 28px; font-weight: bold; margin-bottom: 20px; animation: aiFloat 3s ease-in-out infinite; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
            ü§ñ ƒ∞≈ülem Ba≈ülatƒ±ldƒ±
        </div>
        <div style="font-size: 18px; margin-bottom: 30px; opacity: 0.9; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
            Arka planda devam ediyor...
        </div>
        <div style="width: 80px; height: 80px; border: 4px solid rgba(255,255,255,0.3); border-top: 4px solid white; border-radius: 50%; animation: spin 1s linear infinite; margin-bottom: 20px;"></div>
        <div style="width: 300px; height: 6px; background: rgba(255,255,255,0.3); border-radius: 3px; overflow: hidden; margin-bottom: 15px;">
            <div id="aiProgressBar" style="height: 100%; background: linear-gradient(90deg, #fff, #f0f0f0, #fff); width: 0%; transition: width 0.3s ease;"></div>
        </div>
        <div id="aiStatusText" style="font-size: 14px; opacity: 0.8; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
            ƒ∞≈ülem ba≈ülatƒ±lƒ±yor...
        </div>
        <div style="margin-top: 25px; font-size: 12px; opacity: 0.7;">
            <button onclick="closeTranslationModal()" class="btn btn-sm" style="background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white; padding: 5px 15px; border-radius: 15px;">
                Kapat
            </button>
        </div>
    `;
    
    // Modal content'e ekle
    modalContent.appendChild(overlay);
    
    // G√∂r√ºn√ºr yap
    setTimeout(() => {
        overlay.style.opacity = '1';
    }, 50);
    
    // DOM koruma sistemini ba≈ülat
    startOverlayProtection();
    
    console.log('‚ú® A1-STYLE: AI overlay displayed with DOM protection, modal STAYS OPEN');
}

// Queue translation ba≈ülat - A1 STƒ∞Lƒ∞
function startQueueTranslationA1Style(entityType, entityId, sourceLanguage, targetLanguages) {
    console.log('üöÄ A1-STYLE: Starting queue translation...', { entityType, entityId, sourceLanguage, targetLanguages });
    
    updateProgress('üöÄ Yapay zeka sistemi devreye giriyor...', 10);
    
    // Livewire component'i bul ve job ba≈ülat
    findAndCallQueueTranslationA1Style(entityId, sourceLanguage, targetLanguages)
        .then(sessionId => {
            console.log('‚úÖ A1-STYLE: Queue started, session:', sessionId);
            updateProgress('üí™ G√º√ßl√º AI motorlarƒ± √ßalƒ±≈ümaya ba≈üladƒ±...', 20);
            
            // MODAL A√áIK KALIR - sadece progress tracking ba≈ülat
            startProgressTrackingA1Style(sessionId);
        })
        .catch(error => {
            console.error('‚ùå Queue error:', error);
            updateProgress('üî• Sistemde ge√ßici problem var, tekrar deneyin!', 0);
            // Sadece hata durumunda reset et
            setTimeout(() => {
                resetTranslationButton();
                hideAIOverlay();
            }, 3000);
        });
}

// Livewire component bul ve √ßaƒüƒ±r - A1 STƒ∞Lƒ∞
function findAndCallQueueTranslationA1Style(entityId, sourceLanguage, targetLanguages) {
    return new Promise((resolve, reject) => {
        const modal = document.getElementById('aiTranslationModal');
        const entityType = (modal && modal.getAttribute('data-entity-type')) || 'page';
        
        const componentNames = [
            `${entityType}-component`,
            `${entityType}Component`, 
            `${entityType}ManageComponent`,
            `${entityType}-manage-component`
        ];
        
        let targetComponent = null;
        // Livewire element'leri bul - wire:id attribute ile
        const wireElements = document.querySelectorAll('[wire\\3A id]');
        
        for (let element of wireElements) {
            const wireId = element.getAttribute('wire:id');
            try {
                const component = Livewire.find(wireId);
                if (component && component.__instance) {
                    const componentName = (component.__instance.fingerprint && component.__instance.fingerprint.name) || component.__instance.name || 'unknown';
                    
                    if (componentNames.some(name => componentName === name || componentName.includes(name))) {
                        targetComponent = component;
                        console.log('üéØ A1-STYLE: Found component:', componentName);
                        break;
                    }
                }
            } catch (error) {
                console.log('‚ùå Component error:', wireId, error);
            }
        }
        
        if (targetComponent) {
            let listenerRemoved = false;
            const sessionListener = (data) => {
                if (listenerRemoved) return;
                listenerRemoved = true;
                
                const eventData = Array.isArray(data) ? data[0] : data;
                if (eventData && eventData.sessionId) {
                    console.log('‚úÖ A1-STYLE: SessionId received:', eventData.sessionId);
                    resolve(eventData.sessionId);
                } else {
                    reject(new Error('No sessionId received'));
                }
            };
            
            // SADECE translationQueued event'ini dinle - MODAL KAPATMA
            Livewire.on('translationQueued', sessionListener);
            targetComponent.call('translateFromModal', entityId, sourceLanguage, targetLanguages);
            
            setTimeout(() => {
                if (!listenerRemoved) {
                    listenerRemoved = true;
                    console.log('‚ö†Ô∏è A1-STYLE: Translation timeout - page will refresh to check results');
                    
                    // Sayfayƒ± yenile ve ba≈üarƒ± kontrol√º yap
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                    
                    reject(new Error('Translation timeout - page will refresh to check results'));
                }
            }, 60000);
            
        } else {
            reject(new Error('Component not found'));
        }
    });
}

// Progress tracking - A1 STƒ∞Lƒ∞ (MODAL A√áIK KALIR)
function startProgressTrackingA1Style(sessionId) {
    console.log('üì° A1-STYLE: Real-time progress tracking ba≈ülatƒ±ldƒ± - session:', sessionId);
    
    let progress = 20;
    let isCompleted = false;
    let pollCount = 0;
    
    const pollInterval = setInterval(() => {
        pollCount++;
        console.log(`üîç A1-STYLE: Polling attempt ${pollCount} for session: ${sessionId}`);
        
        // Progress sim√ºlasyonu - ger√ßek API sonra eklenecek
        if (progress < 75) {
            progress = Math.min(75, progress + Math.random() * 3 + 1);
            updateProgress(`üî• Elite AI sistemi √ßalƒ±≈üƒ±yor... (${Math.floor(progress)}%)`, Math.floor(progress));
        } else {
            updateProgress(`üî• Elite AI sistemi %${Math.floor(progress)} - tamamlanma bekleniyor...`, Math.floor(progress));
        }
        
        // 100 polling'den sonra timeout (100 x 4 = 6.5 dakika)
        if (pollCount >= 100 && !isCompleted) {
            console.log('‚è∞ A1-STYLE: 6.5 dakika timeout, final check yapƒ±yorum');
            clearInterval(pollInterval);
            finalCompletionCheckA1Style(sessionId);
        }
        
    }, 4000); // 4 saniye interval
    
    // Global deƒüi≈ükenler
    window.translationProgressInterval = pollInterval;
    window.translationSessionId = sessionId;
    
    // Ana timeout - 15 dakika
    setTimeout(() => {
        if (!isCompleted) {
            console.log('‚è∞ A1-STYLE: 15 dakika ana timeout');
            clearInterval(pollInterval);
            finalCompletionCheckA1Style(sessionId);
        }
    }, 900000); // 15 dakika
}

// Son completion kontrol√º - A1 STƒ∞Lƒ∞
function finalCompletionCheckA1Style(sessionId) {
    console.log('üîç A1-STYLE: Final completion check ba≈ülatƒ±ldƒ±');
    
    updateProgress('‚è≥ √áeviri tamamlanma durumu kontrol ediliyor...', 90);
    
    // 5 saniye bekle sonra sayfa yenile
    setTimeout(() => {
        console.log('‚ö†Ô∏è A1-STYLE: Final timeout, sayfa yenileniyor');
        updateProgress('‚ö†Ô∏è √áeviri arka planda devam ediyor. Sayfa yenileniyor...', 95);
        
        setTimeout(() => {
            closeTranslationModal();
            window.location.reload();
        }, 3000);
    }, 5000);
}

// Progress g√ºncelle
function updateProgress(message, percentage) {
    console.log(`üìä A1-STYLE: Progress: ${percentage}% - ${message}`);
    
    const progressBar = document.getElementById('aiProgressBar');
    const statusText = document.getElementById('aiStatusText');
    
    if (progressBar) progressBar.style.width = percentage + '%';
    if (statusText) statusText.textContent = message;
}

// AI Overlay gizle
function hideAIOverlay() {
    const overlay = document.getElementById('aiOverlay');
    if (overlay) {
        overlay.style.opacity = '0';
        setTimeout(() => overlay.remove(), 500);
    }
}

// Buton reset - Modern Design
function resetTranslationButton() {
    const startBtn = document.getElementById('startTranslation');
    if (startBtn) {
        startBtn.disabled = false;
        startBtn.style.pointerEvents = 'auto';
        startBtn.innerHTML = '<span><i class="fas fa-magic me-2"></i>√áeviriyi Ba≈ülat</span>';
    }
}

// Modal handle close - handleModalClose override
function handleModalClose() {
    console.log('‚ö†Ô∏è A1-STYLE: handleModalClose called - PREVENTING AUTO CLOSE...');
    // Override default behavior - modal a√ßƒ±k kalsƒ±n
    const overlay = document.getElementById('aiOverlay');
    if (overlay) {
        console.log('üõ°Ô∏è A1-STYLE: Overlay active - ignoring close request');
        return false;
    } else {
        console.log('‚úÖ A1-STYLE: No overlay - allowing manual close');
        closeTranslationModal();
    }
}

// Modal kapat - SADECE MANUEL OLARAK
function closeTranslationModal() {
    console.log('üîí A1-STYLE: Manual modal close...');
    
    resetTranslationButton();
    hideAIOverlay();
    stopOverlayProtection(); // Overlay protection'ƒ± durdur
    
    const modal = document.getElementById('aiTranslationModal');
    if (modal) {
        modal.style.display = 'none';
        modal.classList.remove('show');
        modal.setAttribute('aria-hidden', 'true');
        modal.removeAttribute('aria-modal');
    }
    
    // Backdrop temizle
    document.querySelectorAll('.modal-backdrop').forEach(b => b.remove());
    document.body.classList.remove('modal-open');
    document.body.style.overflow = '';
    
    // Session ID temizle
    window.translationSessionId = null;
    
    // Interval temizle
    if (window.translationProgressInterval) {
        clearInterval(window.translationProgressInterval);
        window.translationProgressInterval = null;
    }
}

// Livewire render korumasƒ± - G√ú√áL√ú DOM KORUMA
document.addEventListener('livewire:before-render', (e) => {
    const modal = document.getElementById('aiTranslationModal');
    const overlay = document.getElementById('aiOverlay');
    
    if (modal && overlay && modal.style.display === 'block') {
        console.log('üõ°Ô∏è A1-STYLE: Blocking Livewire render - modal active!');
        e.preventDefault();
        return false;
    }
});

// INTERVAL KORUMA - Overlay durumunu periyodik kontrol et
if (typeof window.overlayCheckInterval === 'undefined') {
    window.overlayCheckInterval = null;
}

// Overlay koruma ba≈ülat - interval ile
function startOverlayProtection() {
    if (window.overlayCheckInterval) {
        clearInterval(window.overlayCheckInterval);
    }
    
    window.overlayCheckInterval = setInterval(() => {
        const modal = document.getElementById('aiTranslationModal');
        const overlay = document.getElementById('aiOverlay');
        
        // Modal a√ßƒ±k ama overlay yok ise yeniden olu≈ütur
        if (modal && modal.style.display === 'block' && window.translationSessionId && !overlay) {
            console.log('üö® A1-STYLE: Overlay missing - RECREATING!');
            recreateOverlay();
        }
    }, 500); // 500ms interval
}

// Overlay yeniden olu≈ütur
function recreateOverlay() {
    console.log('üîÑ A1-STYLE: Recreating overlay after interference');
    showAIOverlay();
}

// Overlay protection durdur
function stopOverlayProtection() {
    if (window.overlayCheckInterval) {
        clearInterval(window.overlayCheckInterval);
        window.overlayCheckInterval = null;
    }
}

// Livewire event listeners - SADECE COMPLETION ƒ∞√áƒ∞N
document.addEventListener('livewire:initialized', () => {
    console.log('‚ö° A1-STYLE: Livewire initialized - NO AUTO CLOSE EVENTS');
    
    // SADECE completion event'lerini dinle - MODAL KAPATMA YOK
    Livewire.on('translation-complete', (data) => {
        console.log('üéâ A1-STYLE: Translation complete:', data);
        
        if (window.translationProgressInterval) {
            clearInterval(window.translationProgressInterval);
        }
        
        updateProgress('üéâ √áeviri tamamlandƒ±! Sayfa yenileniyor...', 100);
        
        setTimeout(() => {
            closeTranslationModal();
            window.location.reload();
        }, 3000);
    });

    Livewire.on('translation-error', (data) => {
        console.log('‚ùå A1-STYLE: Translation error:', data);
        updateProgress('‚ùå √áeviri hatasƒ± olu≈ütu. Tekrar deneyin.', 0);
        setTimeout(() => {
            hideAIOverlay();
            resetTranslationButton();
        }, 3000);
    });
});

console.log('‚úÖ A1-STYLE Simple Translation Modal loaded successfully - MODAL STAYS OPEN');