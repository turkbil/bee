<?php

namespace Modules\LanguageManagement\Database\Seeders;

use Illuminate\Database\Seeder;
use Modules\LanguageManagement\app\Models\TenantLanguage;
use App\Helpers\TenantHelpers;

class TenantLanguagesSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Bu seeder hem central hem tenant'ta Ã§alÄ±ÅŸabilir
        if (TenantHelpers::isCentral()) {
            $this->command->info('TenantLanguagesSeeder central veritabanÄ±nda Ã§alÄ±ÅŸÄ±yor...');
        } else {
            $this->command->info('TenantLanguagesSeeder tenant veritabanÄ±nda Ã§alÄ±ÅŸÄ±yor...');
        }
        
        // Mevcut dilleri temizle (fresh start iÃ§in)
        TenantLanguage::query()->delete();
        
        // Tenant'a gÃ¶re dil konfigÃ¼rasyonu
        $tenantSpecificLanguages = $this->getTenantSpecificLanguages();
        
        foreach ($tenantSpecificLanguages as $language) {
            TenantLanguage::create($language);
        }
        
        // is_default kolonunu tenant'Ä±n varsayÄ±lan locale'ine gÃ¶re ayarla
        $this->syncDefaultLanguageColumn();
    }
    
    /**
     * Tenant'a gÃ¶re Ã¶zel dil konfigÃ¼rasyonu
     */
    private function getTenantSpecificLanguages(): array
    {
        // Temel dil tanÄ±mlarÄ±
        $allLanguages = [
            'tr' => [
                'code' => 'tr',
                'name' => 'Turkish',
                'native_name' => 'TÃ¼rkÃ§e',
                'direction' => 'ltr',
                'flag_icon' => 'ğŸ‡¹ğŸ‡·',
                'is_active' => true,
                'url_prefix_mode' => 'except_default',
                'sort_order' => 1,
            ],
            'en' => [
                'code' => 'en',
                'name' => 'English',
                'native_name' => 'English',
                'direction' => 'ltr',
                'flag_icon' => 'ğŸ‡ºğŸ‡¸',
                'is_active' => true,
                'url_prefix_mode' => 'except_default',
                'sort_order' => 2,
            ],
            'ar' => [
                'code' => 'ar',
                'name' => 'Arabic',
                'native_name' => 'Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©',
                'direction' => 'rtl',
                'flag_icon' => 'ğŸ‡¸ğŸ‡¦',
                'is_active' => true,
                'url_prefix_mode' => 'except_default',
                'sort_order' => 3,
            ],
        ];
        
        // Tenant'a gÃ¶re hangi dilleri aktif edecek
        if (TenantHelpers::isCentral()) {
            // Central tenant: TÃ¼m diller (tr, en, ar)
            return array_values($allLanguages);
        }
        
        // Tenant context'inde - tenant bilgisinden domain al
        $currentDomain = null;
        try {
            $tenant = tenant();
            if ($tenant && $tenant->domains->first()) {
                $currentDomain = $tenant->domains->first()->domain;
            }
        } catch (\Exception $e) {
            // Tenant context yoksa tÃ¼m dilleri dÃ¶ndÃ¼r
            return array_values($allLanguages);
        }
        
        // Domain'e gÃ¶re dil konfigÃ¼rasyonu - DÄ°NAMÄ°K SÄ°STEM
        switch ($currentDomain) {
            case 'laravel.test':
                // laravel.test: Central domain - TÃ¼m diller (TR, EN, AR)
                return array_values($allLanguages);
                
            case 'a.test':
                // a.test: EN varsayÄ±lan + TR
                return [
                    $allLanguages['en'],  // VarsayÄ±lan
                    $allLanguages['tr']
                ];
                
            case 'b.test':
                // b.test: EN + AR (TR yok)
                return [
                    $allLanguages['ar'],  // VarsayÄ±lan
                    $allLanguages['en']
                ];
                
            case 'c.test':
                // c.test: Sadece EN
                return [
                    $allLanguages['en']   // Sadece Ä°ngilizce
                ];
                
            default:
                // Bilinmeyen tenant'lar: VarsayÄ±lan dili + TR (gÃ¼venli seÃ§enek)
                $tenantDefaultLocale = $tenant?->tenant_default_locale ?? 'tr';
                
                $languages = [$allLanguages['tr']]; // TR her zaman dahil
                
                if ($tenantDefaultLocale !== 'tr' && isset($allLanguages[$tenantDefaultLocale])) {
                    array_unshift($languages, $allLanguages[$tenantDefaultLocale]); // VarsayÄ±lanÄ± baÅŸa ekle
                }
                
                return $languages;
        }
    }
    
    /**
     * is_default kolonunu tenant'Ä±n varsayÄ±lan locale'ine gÃ¶re senkronize et
     */
    private function syncDefaultLanguageColumn(): void
    {
        try {
            // Ã–nce tÃ¼m is_default'larÄ± false yap
            TenantLanguage::query()->update(['is_default' => false]);
            
            // Tenant default locale'i bul
            $tenant = null;
            if (TenantHelpers::isCentral()) {
                // Central: laravel.test
                $defaultCode = 'tr';
            } else {
                $tenant = tenant();
                $defaultCode = $tenant?->tenant_default_locale ?? 'tr';
            }
            
            // VarsayÄ±lan dili true yap
            TenantLanguage::where('code', $defaultCode)
                ->update(['is_default' => true]);
                
        } catch (\Exception $e) {
            $this->command->warn("is_default sync failed: " . $e->getMessage());
        }
    }
}