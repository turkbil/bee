<div class="relative" x-data="{
                            query: '',
                            keywords: [],
                            products: [],
                            total: 0,
                            isOpen: false,
                            loading: false,
                            error: null,
                            highlightIndex: -1,
                            get hasResults() {
                                return this.keywords.length &gt; 0 || this.products.length &gt; 0;
                            },
                            get resultCount() {
                                return this.keywords.length + this.products.length;
                            },
                            resetSuggestions() {
                                this.keywords = [];
                                this.products = [];
                                this.total = 0;
                                this.highlightIndex = -1;
                            },
                            showEmptyState() {
                                return this.query.trim().length &gt;= 2 &amp;&amp; !this.loading &amp;&amp; !this.hasResults &amp;&amp; !this.error;
                            },
                            openDropdown() {
                                const hasContent = this.hasResults || this.showEmptyState() || !!this.error;
                                this.isOpen = hasContent;
                                if (!hasContent) {
                                    this.highlightIndex = -1;
                                }
                            },
                            async search() {
                                const trimmed = this.query.trim();
                                if (trimmed.length &lt; 2) {
                                    this.resetSuggestions();
                                    this.isOpen = false;
                                    this.error = null;
                                    return;
                                }
                                this.loading = true;
                                this.error = null;
                                try {
                                    const response = await fetch(`/api/search/suggestions?q=${encodeURIComponent(trimmed)}`, {
                                        headers: {
                                            'Accept': 'application/json'
                                        }
                                    });

                                    if (!response.ok) {
                                        throw new Error(`HTTP ${response.status}`);
                                    }

                                    const data = await response.json();

                                    if (data.success &amp;&amp; data.data) {
                                        this.keywords = data.data.keywords || [];
                                        this.products = data.data.products || [];
                                        this.total = data.data.total || 0;
                                        this.highlightIndex = -1;
                                    } else {
                                        this.resetSuggestions();
                                    }
                                } catch (e) {
                                    console.error('Suggestions error:', e);
                                    this.resetSuggestions();
                                    this.error = 'Öneriler getirilemedi.';
                                }
                                this.loading = false;
                                this.openDropdown();
                            },
                            goToSearch() {
                                const trimmed = this.query.trim();
                                if (trimmed.length &gt;= 1) {
                                    window.location.href = `/search?q=${encodeURIComponent(trimmed)}`;
                                }
                            },
                            moveHighlight(step) {
                                if (!this.isOpen || this.resultCount === 0) {
                                    return;
                                }

                                let next = this.highlightIndex + step;

                                if (next &lt; 0) {
                                    next = this.resultCount - 1;
                                } else if (next &gt;= this.resultCount) {
                                    next = 0;
                                }

                                this.highlightIndex = next;
                            },
                            isHighlighted(index, type) {
                                const offset = type === 'product' ? this.keywords.length : 0;
                                return this.highlightIndex === index + offset;
                            },
                            setHighlight(index, type) {
                                const offset = type === 'product' ? this.keywords.length : 0;
                                this.highlightIndex = index + offset;
                            },
                            clearHighlight() {
                                this.highlightIndex = -1;
                            },
                            selectHighlighted() {
                                if (this.highlightIndex &lt; 0) {
                                    this.goToSearch();
                                    return;
                                }

                                const combined = [
                                    ...this.keywords.map(keyword =&gt; ({ ...keyword, __type: 'keyword' })),
                                    ...this.products.map(product =&gt; ({ ...product, __type: 'product' })),
                                ];

                                const item = combined[this.highlightIndex];

                                if (!item) {
                                    return;
                                }

                                if (item.__type === 'keyword') {
                                    this.selectKeyword(item);
                                } else {
                                    this.selectProduct(item);
                                }
                            },
                            selectKeyword(keyword) {
                                if (!keyword?.text) {
                                    return;
                                }
                                this.query = keyword.text;
                                this.goToSearch();
                            },
                            selectProduct(product, index = 0) {
                                if (product?.url) {
                                    // Track click before navigation
                                    this.trackClick(product, index);
                                    window.location.href = product.url;
                                }
                            },
                            async trackClick(product, position) {
                                if (!product) return;

                                try {
                                    // Type mapping (frontend format → backend model class)
                                    const typeMap = {
                                        'products': 'Modules\\Shop\\App\\Models\\ShopProduct',
                                        'categories': 'Modules\\Shop\\App\\Models\\ShopCategory',
                                        'brands': 'Modules\\Shop\\App\\Models\\ShopBrand'
                                    };

                                    const modelType = typeMap[product.type] || product.type;

                                    // Extract ID from product
                                    let productId = product.id;
                                    if (!productId &amp;&amp; product.url) {
                                        // Try to extract ID from URL if needed
                                        const urlParts = product.url.split('/');
                                        productId = parseInt(urlParts[urlParts.length - 1]) || 0;
                                    }

                                    await fetch('/api/search/track-click', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                            'X-CSRF-TOKEN': document.querySelector('meta[name=" csrf-token"]')?.content="" ||="" ''="" },="" body:="" json.stringify({="" query:="" this.query,="" result_id:="" productid,="" result_type:="" modeltype,="" position:="" position,="" opened_in_new_tab:="" false="" })="" });="" }="" catch="" (error)="" {="" console.warn('click="" tracking="" failed:',="" error);="" handlefocus()="" this.$dispatch('search-toggle',="" true);="" if="" (this.query.trim().length="">= 2) {
                                    this.openDropdown();
                                }
                            },
                            closeDropdown() {
                                this.isOpen = false;
                                this.clearHighlight();
                            }
                        }" @click.away="closeDropdown()"&gt;
                            <div class="relative">
                                <input type="search" x-model="query" @focus="handleFocus()" @input.debounce.300ms="search()" @keydown.enter.prevent="selectHighlighted()" @keydown.arrow-down.prevent="moveHighlight(1)" @keydown.arrow-up.prevent="moveHighlight(-1)" @keydown.escape.prevent="$dispatch('search-toggle', false); closeDropdown()" placeholder="Ürün, kategori veya marka arayın..." class="w-full bg-white dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-600 rounded-full px-6 py-3 pl-12 pr-24 focus:outline-none focus:border-blue-500 dark:focus:border-blue-400 transition text-gray-800 dark:text-white placeholder-gray-400 dark:placeholder-gray-500" autocomplete="off">
                                <i class="fa-solid fa-magnifying-glass absolute left-4 top-1/2 -translate-y-1/2 text-blue-500 dark:text-blue-400"></i>
                                <button @click="goToSearch()" type="button" class="absolute right-2 top-1/2 -translate-y-1/2 bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-2 rounded-full hover:from-blue-700 hover:to-purple-700 transition disabled:opacity-70 disabled:cursor-not-allowed" :disabled="loading">
                                    <i class="fa-solid fa-spinner fa-spin" x-show="loading" style="display: none;"></i>
                                    <span x-show="!loading" style="display: none;">Ara</span>
                                </button>
                            </div>

                            
                            <div x-show="isOpen" x-transition="" class="absolute top-full left-0 right-0 mt-2 bg-white dark:bg-gray-800 shadow-xl rounded-lg z-40 border border-gray-200 dark:border-gray-700" style="z-index: 40; display: none;">

                                <template x-if="error">
                                    <div class="px-5 py-6 text-sm text-red-600 dark:text-red-400 flex items-center gap-3">
                                        <i class="fa-solid fa-circle-exclamation text-base"></i>
                                        <span x-text="error"></span>
                                    </div>
                                </template>

                                <div class="max-h-[28rem] overflow-y-auto">
                                    <div class="grid gap-8 px-4 py-4 lg:grid-cols-[minmax(0,0.9fr)_minmax(0,1.1fr)]">
                                        
                                        <div x-show="(keywords?.length || 0) &gt; 0" class="space-y-2 border border-gray-200 dark:border-gray-700 rounded-lg p-4 lg:p-5 bg-gray-50 dark:bg-gray-900/40" style="display: none;">
                                            <div class="flex items-center justify-between text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide">
                                                <span><i class="fa-solid fa-fire text-orange-500 mr-1"></i> Popüler Aramalar</span>
                                                <span class="text-[10px] text-gray-400 dark:text-gray-500" x-text="`${keywords?.length || 0}`"></span>
                                            </div>
                                            <div class="space-y-1">
                                                <template x-for="(keyword, index) in keywords" :key="'k-'+index">
                                                    <a href="#" @click.prevent="selectKeyword(keyword)" @mouseenter="setHighlight(index, 'keyword')" @mouseleave="clearHighlight()" :class="[
                                                            'flex items-center justify-between gap-3 px-3 py-2 rounded-md transition group',
                                                            isHighlighted(index, 'keyword')
                                                                ? 'bg-blue-50 dark:bg-gray-800/70 text-blue-600 dark:text-blue-400'
                                                                : 'hover:bg-white dark:hover:bg-gray-800/70'
                                                        ]">
                                                        <div class="flex items-center gap-3">
                                                            <span class="w-7 h-7 rounded-full bg-white dark:bg-gray-800 flex items-center justify-center text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition">
                                                                <i class="fa-solid fa-magnifying-glass text-sm"></i>
                                                            </span>
                                                            <span class="font-medium text-sm text-gray-900 dark:text-white" x-text="keyword.text"></span>
                                                        </div>
                                                        <span x-show="keyword.count" class="text-xs text-gray-400 dark:text-gray-500" x-text="`${keyword.count} sonuç`"></span>
                                                    </a>
                                                </template>
                                            </div>
                                        </div>

                                        
                                        <div x-show="(products?.length || 0) &gt; 0" class="space-y-3" style="display: none;">
                                            <div class="flex items-center justify-between text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide">
                                                <span><i class="fa-solid fa-box text-blue-500 mr-1"></i> Ürünler</span>
                                                <span x-show="(total || 0) &gt; 0" class="text-[11px] font-medium text-gray-400 dark:text-gray-500" x-text="`${products?.length || 0} / ${total || 0}`" style="display: none;"></span>
                                            </div>
                                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                                                <template x-for="(product, index) in products" :key="'p-'+index">
                                                    <a href="#" @click.prevent="selectProduct(product, index)" @mouseenter="setHighlight(index, 'product')" @mouseleave="clearHighlight()" :class="[
                                                            'flex gap-3 p-3 rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 transition group',
                                                            isHighlighted(index, 'product')
                                                                ? 'border-blue-400 dark:border-blue-500 shadow-md'
                                                                : 'hover:border-blue-400 dark:hover:border-blue-500 hover:shadow-md'
                                                        ]">
                                                        <div class="w-16 h-16 rounded-md bg-gray-100 dark:bg-gray-700 flex items-center justify-center overflow-hidden flex-shrink-0">
                                                            <template x-if="product.image">
                                                                <img :src="product.image" :alt="product.title" width="64" height="64" loading="lazy" class="w-full h-full object-cover">
                                                            </template>
                                                            <template x-if="!product.image">
                                                                <i class="fa-solid fa-cube text-gray-400 dark:text-gray-500 text-xl"></i>
                                                            </template>
                                                        </div>
                                                        <div class="flex-1 min-w-0">
                                                            <div class="font-medium text-sm text-gray-900 dark:text-white leading-snug line-clamp-2" x-html="product.highlighted_title || product.title"></div>
                                                            <p x-show="product.highlighted_description" class="text-xs text-gray-500 dark:text-gray-400 mt-1 line-clamp-2" x-html="product.highlighted_description"></p>
                                                            <div class="text-xs text-gray-500 dark:text-gray-400 mt-2 flex items-center justify-between">
                                                                <span x-text="product.type_label"></span>
                                                                <span x-show="product.price" class="ml-2 font-semibold text-green-600 dark:text-green-400" x-text="product.price"></span>
                                                            </div>
                                                        </div>
                                                    </a>
                                                </template>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div x-show="showEmptyState()" class="px-5 py-10 text-center text-sm text-gray-500 dark:text-gray-400" style="display: none;">
                                    <i class="fa-regular fa-face-smile text-xl mb-2 block text-blue-500 dark:text-blue-400"></i>
                                    <span>Daha fazla sonuç için farklı bir anahtar kelime deneyin.</span>
                                </div>

                                
                                <a :href="`/search?q=${encodeURIComponent(query || '')}`" x-show="(total || 0) &gt; 0" class="block p-3 text-center text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 font-medium transition border-t border-gray-200 dark:border-gray-700" style="display: none;">
                                    <i class="fa-solid fa-arrow-right mr-2"></i>
                                    <span x-text="`Tüm ${total || 0} sonucu gör`"></span>
                                </a>
                            </div>
                        </div>