// Page Management System - Consolidated JavaScript
// Combines all manage-related JavaScript code from component, layout and main.js

// Global variables
window.currentPageId = null;
window.currentLanguage = 'tr';
window.allLanguagesSeoData = {};

// ===== SYSTEM INITIALIZATION =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Page Manage sayfasƒ± ba≈ülatƒ±lƒ±yor...');
    
    // Initialize core systems
    setupLanguageSwitching();
    setupSaveAndContinueSystem();
    setupSeoCharacterCounters();
    initializeTabSystem();
    setupSlugNormalization();
    
    console.log('‚úÖ Page Manage sayfasƒ± hazƒ±r!');
});

// ===== LANGUAGE SWITCHING SYSTEM =====
function setupLanguageSwitching() {
    $('.language-switch-btn').on('click', function() {
        const language = $(this).data('language');
        const nativeName = $(this).data('native-name');
        
        console.log('üåç Dil deƒüi≈ütirildi:', language);
        
        // Update button states
        $('.language-switch-btn').removeClass('text-primary').addClass('text-muted')
            .css('border-bottom', '2px solid transparent');
        
        $(this).removeClass('text-muted').addClass('text-primary')
            .css('border-bottom', '2px solid var(--primary-color)');
        
        // Update language badge
        const languageBadge = document.getElementById('languageBadge');
        if (languageBadge && nativeName) {
            const badgeContent = languageBadge.querySelector('.nav-link');
            if (badgeContent) {
                badgeContent.innerHTML = `<i class="fas fa-language me-2"></i>${nativeName}<i class="fas fa-chevron-down ms-2"></i>`;
            }
        }
        
        // Check active tab - Code tab is preserved
        const activeTabElement = $('.nav-tabs .nav-link.active');
        const activeTab = activeTabElement.attr('href');
        
        if (activeTab && activeTab === '#2') {
            console.log('üéØ Code tab aktif - dil deƒüi≈üikliƒüi engellendi');
        } else {
            console.log('üéØ Normal dil deƒüi≈üikliƒüi yapƒ±lƒ±yor');
        }
        
        // Update language content visibility
        $('.language-content').hide();
        $(`.language-content[data-language="${language}"]`).show();
        
        // Update global variables
        window.currentLanguage = language;
    });
}

// ===== SAVE AND CONTINUE SYSTEM =====
function setupSaveAndContinueSystem() {
    document.addEventListener('click', function(e) {
        const saveButton = e.target.closest('.save-button');
        
        if (saveButton) {
            console.log('üíæ Save button tƒ±klandƒ±');
            
            // Get active language
            const activeLanguageBtn = document.querySelector('.language-switch-btn.text-primary');
            const currentLang = activeLanguageBtn ? activeLanguageBtn.dataset.language : window.currentLanguage;
            
            // Detect "Save and Continue" button
            const wireClick = saveButton.getAttribute('wire:click');
            const isContinueButton = wireClick && wireClick.includes('save(false, false)');
            
            if (isContinueButton && currentLang) {
                localStorage.setItem('page_active_language', currentLang);
                console.log('üéØ Kaydet ve Devam Et - dil korunacak:', currentLang);
            } else {
                localStorage.removeItem('page_active_language');
                console.log('üì§ Normal Kaydet - dil state temizlendi');
            }
        }
    });
    
    // Restore language on page load
    const savedLanguage = localStorage.getItem('page_active_language');
    if (savedLanguage) {
        console.log('üîÑ Kaydedilen dil restore ediliyor:', savedLanguage);
        
        setTimeout(function() {
            const targetLangBtn = $(`.language-switch-btn[data-language="${savedLanguage}"]`);
            if (targetLangBtn.length) {
                targetLangBtn.click();
                console.log('‚úÖ Dil restore tamamlandƒ±:', savedLanguage);
            }
            localStorage.removeItem('page_active_language');
        }, 300);
    }
}

// ===== SEO CHARACTER COUNTERS =====
function setupSeoCharacterCounters() {
    setTimeout(function() {
        const languages = ['tr', 'en', 'ar'];
        
        languages.forEach(function(lang) {
            // Title counter
            const titleInput = document.querySelector(`[wire\\:model="seoDataCache.${lang}.seo_title"]`);
            const titleCounter = document.querySelector(`.char-count-${lang}-title`);
            const titleProgress = document.querySelector(`.progress-${lang}-title`);
            
            if (titleInput && titleCounter && titleProgress) {
                function updateTitleCounter() {
                    const length = titleInput.value.length;
                    titleCounter.textContent = length;
                    titleProgress.style.width = (length / 60 * 100) + '%';
                    
                    if (length > 54) titleProgress.className = 'progress-bar bg-danger';
                    else if (length > 48) titleProgress.className = 'progress-bar bg-warning';
                    else titleProgress.className = 'progress-bar bg-success';
                }
                
                titleInput.addEventListener('input', updateTitleCounter);
                updateTitleCounter();
            }
            
            // Description counter
            const descInput = document.querySelector(`[wire\\:model="seoDataCache.${lang}.seo_description"]`);
            const descCounter = document.querySelector(`.char-count-${lang}-desc`);
            const descProgress = document.querySelector(`.progress-${lang}-desc`);
            
            if (descInput && descCounter && descProgress) {
                function updateDescCounter() {
                    const length = descInput.value.length;
                    descCounter.textContent = length;
                    descProgress.style.width = (length / 160 * 100) + '%';
                    
                    if (length > 144) descProgress.className = 'progress-bar bg-danger';
                    else if (length > 128) descProgress.className = 'progress-bar bg-warning';
                    else descProgress.className = 'progress-bar bg-success';
                }
                
                descInput.addEventListener('input', updateDescCounter);
                updateDescCounter();
            }
        });
    }, 800); // Wait for SEO tab to load
}

// ===== TAB SYSTEM =====
function initializeTabSystem() {
    const storageKey = 'page_active_tab';
    
    // Restore active tab
    const savedTab = localStorage.getItem(storageKey);
    if (savedTab) {
        const tabElement = document.querySelector(`[href="${savedTab}"]`);
        if (tabElement && typeof bootstrap !== 'undefined') {
            const tab = new bootstrap.Tab(tabElement);
            tab.show();
        }
    }
    
    // Bind tab events
    const tabLinks = document.querySelectorAll('[data-bs-toggle="tab"]');
    tabLinks.forEach(link => {
        link.addEventListener('shown.bs.tab', (e) => {
            localStorage.setItem(storageKey, e.target.getAttribute('href'));
        });
    });
}

// ===== MULTI-LANGUAGE FORM SWITCHER =====
const MultiLangFormSwitcher = {
    init() {
        const languageButtons = document.querySelectorAll('.language-switch-btn');
        const languageContents = document.querySelectorAll('.language-content');
        
        if (languageButtons.length === 0) {
            console.warn('‚ö†Ô∏è Language switch buttons bulunamadƒ±');
            return;
        }
        
        // Language button click events
        languageButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                const targetLang = button.getAttribute('data-language');
                
                if (targetLang) {
                    this.switchLanguage(targetLang).catch(console.error);
                }
            });
        });
    },
    
    async switchLanguage(language) {
        // Update global currentLanguage
        window.currentLanguage = language;
        console.log('üåç Global currentLanguage g√ºncellendi:', language);
        
        // Update active button
        const languageButtons = document.querySelectorAll('.language-switch-btn');
        languageButtons.forEach(btn => {
            if (btn.getAttribute('data-language') === language) {
                btn.classList.add('text-primary');
                btn.classList.remove('text-muted');
                btn.style.borderBottom = '2px solid var(--primary-color) !important';
            } else {
                btn.classList.remove('text-primary');
                btn.classList.add('text-muted');
                btn.style.borderBottom = '2px solid transparent';
            }
        });
        
        // Update content visibility
        const languageContents = document.querySelectorAll('.language-content');
        languageContents.forEach(content => {
            if (content.getAttribute('data-language') === language) {
                content.style.display = 'block';
            } else {
                content.style.display = 'none';
            }
        });
        
        // Update language badge
        const nativeName = document.querySelector(`[data-language="${language}"]`)?.getAttribute('data-native-name');
        const languageBadge = document.getElementById('languageBadge');
        if (languageBadge && nativeName) {
            const badgeContent = languageBadge.querySelector('.nav-link');
            if (badgeContent) {
                badgeContent.innerHTML = `<i class="fas fa-language me-2"></i>${nativeName}<i class="fas fa-chevron-down ms-2"></i>`;
            }
        }
    }
};

// ===== GLOBAL LOADING BAR SYSTEM =====
document.addEventListener('DOMContentLoaded', function() {
    const loadingBar = document.getElementById('global-loading-bar');
    const progressBar = document.getElementById('loading-progress');
    
    if (!loadingBar || !progressBar) return;
    
    // Loading bar controller
    const loader = {
        show: function() {
            loadingBar.style.opacity = '1';
            progressBar.style.width = '10%';
        },
        
        setValue: function(value) {
            progressBar.style.width = (value * 100) + '%';
        },
        
        hide: function() {
            this.setValue(1);
            setTimeout(() => {
                loadingBar.style.opacity = '0';
                progressBar.style.width = '0%';
            }, 100);
        }
    };
    
    // Show loading bar
    function showLoadingBar() {
        loader.show();
        setTimeout(() => loader.setValue(0.9), 200);
    }
    
    // Hide loading bar
    function hideLoadingBar() {
        loader.hide();
    }
    
    // Attach loading to links
    function attachLoadingToLinks() {
        const links = document.querySelectorAll('a[href]:not([href^="#"]):not([href^="javascript:"]):not([href^="mailto:"]):not([href^="tel:"]):not([data-no-loading])');
        
        links.forEach(link => {
            if (link.dataset.loadingAttached) return;
            link.dataset.loadingAttached = 'true';
            
            link.addEventListener('click', function(e) {
                if (this.hostname !== window.location.hostname) return;
                if (this.getAttribute('data-bs-toggle')) return;
                if (this.getAttribute('data-bs-target')) return;
                
                showLoadingBar();
            });
        });
        
        // Wire:click elements
        const wireElements = document.querySelectorAll('[wire\\:click]');
        wireElements.forEach(element => {
            if (element.dataset.wireLoadingAttached) return;
            element.dataset.wireLoadingAttached = 'true';
            
            element.addEventListener('click', function(e) {
                showLoadingBar();
            });
        });
    }
    
    // Initialize
    window.addEventListener('load', hideLoadingBar);
    attachLoadingToLinks();
    
    // Livewire integration
    if (typeof Livewire !== 'undefined') {
        Livewire.hook('message.sent', () => {
            showLoadingBar();
        });
        
        Livewire.hook('message.processed', () => {
            hideLoadingBar();
        });
    }
    
    // Form submissions
    document.addEventListener('submit', function(e) {
        if (e.target.tagName === 'FORM') {
            showLoadingBar();
        }
    });
    
    // Browser navigation
    window.addEventListener('beforeunload', function() {
        showLoadingBar();
    });
    
    // Reattach on DOM changes
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.addedNodes.length > 0) {
                setTimeout(attachLoadingToLinks, 100);
            }
        });
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
});

// ===== MANAGE PAGE SPECIFIC INITIALIZATION =====
document.addEventListener('DOMContentLoaded', function() {
    if (window.location.pathname.includes('/manage')) {
        MultiLangFormSwitcher.init();
    }
});

// ===== LIVEWIRE UPDATE HANDLERS =====
document.addEventListener('livewire:updated', function() {
    if (window.location.pathname.includes('/manage')) {
        setTimeout(function() {
            setupSeoCharacterCounters();
            MultiLangFormSwitcher.init();
        }, 100);
    }
});

// ===== GLOBAL TAB MANAGER =====
// TabManager is defined in main.js - using that one instead

// ===== SLUG NORMALIZATION SYSTEM =====
function setupSlugNormalization() {
    // JavaScript slug normalization function (matches PHP SlugHelper)
    function normalizeSlug(slug) {
        slug = slug.toLowerCase().trim();
        
        // Multi-language character mapping - extensible for any language
        const characterMaps = {
            // Turkish characters
            '√ß': 'c', 'ƒü': 'g', 'ƒ±': 'i', '√∂': 'o', '≈ü': 's', '√º': 'u',
            '√á': 'c', 'ƒû': 'g', 'I': 'i', 'ƒ∞': 'i', '√ñ': 'o', '≈û': 's', '√ú': 'u',
            
            // Arabic characters
            'ÿß': 'a', 'ÿ®': 'b', 'ÿ™': 't', 'ÿ´': 'th', 'ÿ¨': 'j', 'ÿ≠': 'h', 'ÿÆ': 'kh',
            'ÿØ': 'd', 'ÿ∞': 'dh', 'ÿ±': 'r', 'ÿ≤': 'z', 'ÿ≥': 's', 'ÿ¥': 'sh', 'ÿµ': 's',
            'ÿ∂': 'd', 'ÿ∑': 't', 'ÿ∏': 'z', 'ÿπ': 'a', 'ÿ∫': 'gh', 'ŸÅ': 'f', 'ŸÇ': 'q',
            'ŸÉ': 'k', 'ŸÑ': 'l', 'ŸÖ': 'm', 'ŸÜ': 'n', 'Ÿá': 'h', 'Ÿà': 'w', 'Ÿä': 'y',
            'Ÿâ': 'a', 'ÿ©': 'h', 'ÿ°': 'a', 'ÿ£': 'a', 'ÿ•': 'i', 'ÿ¢': 'a', 'ÿ§': 'w',
            'ÿ¶': 'y', 'Ÿã': '', 'Ÿå': '', 'Ÿç': '', 'Ÿé': '', 'Ÿè': '', 'Ÿê': '', 'Ÿë': '', 'Ÿí': '',
            
            // French characters
            '√†': 'a', '√°': 'a', '√¢': 'a', '√£': 'a', '√§': 'a', '√•': 'a',
            '√®': 'e', '√©': 'e', '√™': 'e', '√´': 'e',
            '√¨': 'i', '√≠': 'i', '√Æ': 'i', '√Ø': 'i',
            '√≤': 'o', '√≥': 'o', '√¥': 'o', '√µ': 'o', '√∏': 'o',
            '√π': 'u', '√∫': 'u', '√ª': 'u',
            '√Ω': 'y', '√ø': 'y',
            '√±': 'n', '√ß': 'c',
            
            // German characters
            '√§': 'ae', '√∂': 'oe', '√º': 'ue', '√ü': 'ss',
            '√Ñ': 'ae', '√ñ': 'oe', '√ú': 'ue',
            
            // Spanish characters
            '√±': 'n', '√ë': 'n',
            
            // Portuguese characters
            '√£': 'a', '√µ': 'o', '√ß': 'c',
            
            // Italian characters - mostly covered by French
            
            // Russian (Cyrillic) characters
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
            
            // Greek characters
            'Œ±': 'a', 'Œ≤': 'b', 'Œ≥': 'g', 'Œ¥': 'd', 'Œµ': 'e', 'Œ∂': 'z', 'Œ∑': 'h',
            'Œ∏': 'th', 'Œπ': 'i', 'Œ∫': 'k', 'Œª': 'l', 'Œº': 'm', 'ŒΩ': 'n', 'Œæ': 'x',
            'Œø': 'o', 'œÄ': 'p', 'œÅ': 'r', 'œÉ': 's', 'œÑ': 't', 'œÖ': 'y', 'œÜ': 'f',
            'œá': 'ch', 'œà': 'ps', 'œâ': 'w',
            
            // Polish characters
            'ƒÖ': 'a', 'ƒá': 'c', 'ƒô': 'e', '≈Ç': 'l', '≈Ñ': 'n', '√≥': 'o', '≈õ': 's',
            '≈∫': 'z', '≈º': 'z',
            
            // Czech characters
            '√°': 'a', 'ƒç': 'c', 'ƒè': 'd', '√©': 'e', 'ƒõ': 'e', '√≠': 'i', '≈à': 'n',
            '√≥': 'o', '≈ô': 'r', '≈°': 's', '≈•': 't', '√∫': 'u', '≈Ø': 'u', '√Ω': 'y',
            '≈æ': 'z',
            
            // Hungarian characters
            '√°': 'a', '√©': 'e', '√≠': 'i', '√≥': 'o', '√∂': 'o', '≈ë': 'o', '√∫': 'u',
            '√º': 'u', '≈±': 'u',
            
            // Japanese romanization (basic hiragana/katakana)
            '„ÅÇ': 'a', '„ÅÑ': 'i', '„ÅÜ': 'u', '„Åà': 'e', '„Åä': 'o',
            '„Åã': 'ka', '„Åç': 'ki', '„Åè': 'ku', '„Åë': 'ke', '„Åì': 'ko',
            '„Åï': 'sa', '„Åó': 'shi', '„Åô': 'su', '„Åõ': 'se', '„Åù': 'so',
            '„Åü': 'ta', '„Å°': 'chi', '„Å§': 'tsu', '„Å¶': 'te', '„Å®': 'to',
            '„Å™': 'na', '„Å´': 'ni', '„Å¨': 'nu', '„Å≠': 'ne', '„ÅÆ': 'no',
            '„ÅØ': 'ha', '„Å≤': 'hi', '„Åµ': 'fu', '„Å∏': 'he', '„Åª': 'ho',
            '„Åæ': 'ma', '„Åø': 'mi', '„ÇÄ': 'mu', '„ÇÅ': 'me', '„ÇÇ': 'mo',
            '„ÇÑ': 'ya', '„ÇÜ': 'yu', '„Çà': 'yo',
            '„Çâ': 'ra', '„Çä': 'ri', '„Çã': 'ru', '„Çå': 're', '„Çç': 'ro',
            '„Çè': 'wa', '„Çí': 'wo', '„Çì': 'n'
        };
        
        // Apply all character mappings
        for (let [search, replace] of Object.entries(characterMaps)) {
            slug = slug.replaceAll(search, replace);
        }
        
        // Replace spaces with hyphens and clean up
        slug = slug.replace(/\s+/g, '-');
        slug = slug.replace(/[^a-z0-9\-]/g, '');
        slug = slug.replace(/\-+/g, '-');
        slug = slug.replace(/^-+|-+$/g, '');
        
        return slug;
    }
    
    // Find all slug inputs and attach normalization
    setTimeout(function() {
        const languages = ['tr', 'en', 'ar'];
        
        languages.forEach(function(lang) {
            // Find slug input by wire:model attribute
            const allInputs = document.querySelectorAll('input');
            let slugInput = null;
            for (let input of allInputs) {
                if (input.getAttribute('wire:model') === `multiLangInputs.${lang}.slug`) {
                    slugInput = input;
                    break;
                }
            }
            
            if (slugInput && !slugInput.dataset.slugNormalized) {
                slugInput.dataset.slugNormalized = 'true';
                
                slugInput.addEventListener('input', function(e) {
                    const originalValue = e.target.value;
                    let normalizedValue = normalizeSlug(originalValue);
                    
                    // OTOMATIK D√úZELTME: Eƒüer normalize edilmi≈ü slug bo≈üsa title'dan olu≈ütur
                    if (!normalizedValue || normalizedValue.trim() === '') {
                        const titleInput = document.querySelector(`input[wire\\:model="multiLangInputs.${lang}.title"]`);
                        if (titleInput && titleInput.value.trim()) {
                            normalizedValue = normalizeSlug(titleInput.value);
                            console.log(`üîÑ ${lang} slug bo≈ü - title'dan olu≈üturuldu: "${titleInput.value}" ‚Üí "${normalizedValue}"`);
                        }
                    }
                    
                    if (originalValue !== normalizedValue) {
                        e.target.value = normalizedValue;
                        
                        // Trigger Livewire update
                        e.target.dispatchEvent(new Event('input', { bubbles: true }));
                        
                        console.log(`üîß ${lang} slug normalized: "${originalValue}" ‚Üí "${normalizedValue}"`);
                    }
                });
                
                console.log(`‚úÖ Slug normalization enabled for ${lang}`);
            }
        });
    }, 500); // Wait for DOM to be ready
}

// ===== GLOBAL EXPORTS =====
// window.TabManager = TabManager; // Already exported from main.js
window.MultiLangFormSwitcher = MultiLangFormSwitcher;
window.setupLanguageSwitching = setupLanguageSwitching;
window.setupSaveAndContinueSystem = setupSaveAndContinueSystem;
window.setupSeoCharacterCounters = setupSeoCharacterCounters;
window.setupSlugNormalization = setupSlugNormalization;

// Helper functions for loading data
function loadDataForLanguage(language) {
    console.log('üìä T√ºm veri y√ºkleniyor:', language);
    // This function is handled by Livewire system
    // Language contents are already managed by show/hide
}

function loadDataForLanguageExceptCode(language) {
    console.log('üìä Veri y√ºkleniyor (Code HARƒ∞√á):', language);
    // SEO tab preserves Code tab
    // Language contents are managed by show/hide, Code tab is not affected
}